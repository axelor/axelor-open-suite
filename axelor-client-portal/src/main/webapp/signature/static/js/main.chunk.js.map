{"version":3,"sources":["service.js","utils.js","App.js","serviceWorker.js","index.js"],"names":["lastCookieString","lastCookies","readCookie","name","cookieString","document","cookie","split","reduce","obj","value","parts","headers","Accept","joinPath","baseURL","subURL","sep","lastIndexOf","length","Services","props","this","state","restURL","actionURL","url","data","method","fetch","credentials","body","JSON","stringify","then","response","json","userName","password","username","callback","info","Promise","resolve","reject","xhr","XMLHttpRequest","doClean","intercept","http","delete","open","Object","keys","forEach","k","setRequestHeader","withCredentials","overrideMimeType","onload","abort","onreadystatechange","readyState","status","callbackInterceptor","Error","result","parse","responseText","id","e","upload","onprogress","fileSize","total","parseFloat","loaded","done","Math","round","progress","transfer","format","size","toFixed","formatSize","lengthComputable","send","path","responseType","model","entity","request","action","query","translate","str","window","_t","URLToBlob","message","filename","substring","blob","file","type","getHeaders","Date","now","min","getBlobAndHeader","res","getUrl","getWidth","innerWidth","App","service","record","useRef","signCanvas","params","useState","width","setWidth","setId","signatureName","setSignatureName","a","dataURL","current","getCanvas","toDataURL","version","field","update","updateRes","getAction","context","buttons","top","getElementsByClassName","i","click","React","useEffect","_params","regex","location","href","match","exec","get","download","resb","reader","FileReader","readAsDataURL","onloadend","base64data","fromDataURL","updateWidth","addEventListener","removeEventListener","className","ref","canvasProps","height","onClick","clear","Boolean","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.chunk.js","sourcesContent":["let lastCookieString;\nlet lastCookies = {};\n\nfunction readCookie(name) {\n  let cookieString = document.cookie || \"\";\n  if (cookieString !== lastCookieString) {\n    lastCookieString = cookieString;\n    lastCookies = cookieString.split(\"; \").reduce((obj, value) => {\n      let parts = value.split(\"=\");\n      obj[parts[0]] = parts[1];\n      return obj;\n    }, {});\n  }\n  return lastCookies[name];\n}\n\nconst headers = {\n  Accept: \"application/json\",\n  \"Content-Type\": \"application/json\",\n  \"X-Requested-With\": \"XMLHttpRequest\",\n  \"X-CSRF-Token\": readCookie(\"CSRF-TOKEN\"),\n};\n\nconst joinPath = (baseURL = \"\", subURL = \"\") => {\n  let sep = `${baseURL}`.lastIndexOf(\"/\") === baseURL.length - 1 ? \"\" : \"/\";\n  return `${baseURL}${sep}${subURL}`;\n};\n\nclass Services {\n  constructor(props) {\n    const baseURL =\n      process.env.NODE_ENV === \"production\" ? \"../\" : \"/axelor-erp/\";\n    this.state = {\n      baseURL,\n      restURL: `${baseURL}ws/rest/`,\n      actionURL: `${baseURL}ws/action/`,\n    };\n  }\n\n  request(url, data = {}, method = \"POST\") {\n    return fetch(url, {\n      method,\n      headers,\n      credentials: \"include\",\n      ...(method !== \"GET\" && { body: JSON.stringify({ ...data }) }),\n    })\n      .then((response) => response.json())\n      .then((body) => body);\n  }\n\n  doLogin(userName, password) {\n    const url = `${this.state.baseURL}login.jsp`;\n    const data = {\n      username: userName,\n      password: password,\n    };\n    return fetch(url, {\n      method: \"POST\",\n      headers,\n      credentials: \"include\",\n      body: JSON.stringify({ ...data }),\n    });\n  }\n\n  upload(data = null, headers = {}, callback = () => true, info = {}) {\n    return new Promise((resolve, reject) => {\n      const baseURL = this.baseURL;\n      const xhr = new XMLHttpRequest(),\n        method = \"POST\",\n        url = joinPath(this.state.baseURL, \"ws/files/upload\");\n\n      const doClean = () =>\n        headers[\"X-File-Id\"]\n          ? this.intercept(() =>\n              this.http.delete(\n                joinPath(\n                  this.baseURL,\n                  \"ws/files/upload/\" + headers[\"X-File-Id\"]\n                )\n              )\n            )\n          : Promise.resolve(true);\n\n      const formatSize = (done, total) => {\n        const format = (size) => {\n          if (size > 1000000000)\n            return parseFloat(size / 1000000000).toFixed(2) + \" GB\";\n          if (size > 1000000)\n            return parseFloat(size / 1000000).toFixed(2) + \" MB\";\n          if (size >= 1000) return parseFloat(size / 1000).toFixed(2) + \" KB\";\n          return size + \" B\";\n        };\n        return format(done || 0) + \"/\" + format(total);\n      };\n\n      xhr.open(method, url, true);\n\n      Object.keys(headers).forEach((k) => {\n        xhr.setRequestHeader(k, headers[k]);\n      });\n\n      xhr.withCredentials = true;\n      xhr.overrideMimeType(\"application/octet-stream\");\n      xhr.setRequestHeader(\"Content-Type\", \"application/octet-stream\");\n      xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n      xhr.setRequestHeader(\"X-CSRF-Token\", readCookie(\"CSRF-TOKEN\"));\n\n      xhr.onload = () => {\n        callback(100);\n      };\n\n      info.abort = () => {\n        xhr.abort();\n        return doClean();\n      };\n\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4) {\n          switch (xhr.status) {\n            case 401:\n              this.callbackInterceptor();\n              throw new Error(\"Unauthorized\");\n            case 200:\n              try {\n                const result = JSON.parse(xhr.responseText);\n                resolve({\n                  result,\n                  url: `${baseURL}ws/rest/com.axelor.meta.db.MetaFile/${result.id}/content/download?v=0`,\n                });\n              } catch (e) {\n                resolve(xhr.responseText);\n              }\n              break;\n            default:\n              doClean();\n              reject({ status: xhr.status });\n              break;\n          }\n        }\n      };\n\n      xhr.upload.onprogress = (e) => {\n        const fileSize = headers[\"X-File-Size\"];\n        const total = parseFloat(headers[\"X-File-Offset\"]) + e.loaded;\n        const done = Math.round((total / fileSize) * 100);\n\n        info.progress = done > 95 ? \"95%\" : done + \"%\";\n        info.transfer = formatSize(total, fileSize);\n        info.loaded = total === fileSize;\n\n        if (e.lengthComputable) {\n          callback((e.loaded / e.total) * 100, info);\n        }\n      };\n\n      xhr.send(data);\n    });\n  }\n\n  download(url) {\n    const path = joinPath(this.state.baseURL, url);\n    return fetch(path, {\n      method: \"GET\",\n      responseType: \"blob\",\n      credentials: \"include\",\n    });\n  }\n\n  update(model, entity) {\n    const url = `${this.state.restURL}${entity}`;\n    const data = {\n      data: model,\n    };\n    return this.request(url, data);\n  }\n\n  delete(entity, id) {\n    const url = `${this.state.restURL}${entity}/${id}`;\n    const method = \"DELETE\";\n    return this.request(url, {}, method);\n  }\n\n  get(entity, id) {\n    const url = `${this.state.restURL}${entity}/${id}`;\n    const method = \"GET\";\n    return this.request(url, {}, method);\n  }\n\n  getAction(model, action, query) {\n    const data = {\n      model: model,\n      action: action,\n      data: query,\n    };\n    const url = `${this.state.actionURL}`;\n    const method = \"POST\";\n    return this.request(url, data, method);\n  }\n}\n\nexport default Services;\n","export const translate = str => {\n  if (window._t && typeof str === \"string\") {\n    return window._t(str);\n  }\n  return str;\n};\n\nexport function URLToBlob(url) {\n  return new Promise(resolve => {\n    if (!url) {\n      resolve({ status: 0, message: \"url must not be null\" });\n    }\n    let filename = url.substring(url.lastIndexOf(\"/\") + 1);\n    let request = new XMLHttpRequest();\n    request.open(\"GET\", url, true);\n    request.responseType = \"blob\";\n    request.onload = function() {\n      const blob = request.response;\n      const file = { name: filename, type: blob.type, size: blob.size };\n      resolve({ status: 1, file, blob });\n    };\n    request.send();\n  });\n}\n\nexport function getHeaders(file = {}) {\n  const headers = {\n    \"X-File-Name\": `sign_${Date.now()}`,\n    \"X-File-Offset\": Math.min(0, file.size),\n    \"X-File-Size\": file.size,\n    \"X-File-Type\": file.type\n  };\n\n  return headers;\n}\n\nexport function getBlobAndHeader(url) {\n  return new Promise(resolve => {\n    URLToBlob(url).then(res => {\n      if (res.status === 1) {\n        const headers = getHeaders(res.file);\n        resolve({ headers, blob: res.blob });\n      } else {\n        resolve({ status: 0 });\n      }\n    });\n  });\n}\n\nexport function getUrl(id) {\n  return `ws/rest/com.axelor.meta.db.MetaFile/${id}/content/download?v=0`;\n}\n\nexport function getWidth() {\n  return window.innerWidth <= 800\n    ? window.innerWidth <= 580\n      ? 300\n      : 550\n    : 800;\n}\n\nexport default {\n  translate,\n  URLToBlob,\n  getHeaders,\n  getBlobAndHeader,\n  getUrl,\n  getWidth\n};\n","import React, { useRef, useState } from \"react\";\nimport SignatureCanvas from \"react-signature-canvas\";\n\nimport \"./App.css\";\nimport Services from \"./service\";\nimport { translate, getBlobAndHeader, getUrl, getWidth } from \"./utils\";\n\nfunction App() {\n  const service = new Services();\n  const record = useRef();\n  const signCanvas = useRef();\n  const params = useRef();\n  const [width, setWidth] = useState(getWidth());\n  const [id, setId] = useState(null);\n  const [signatureName, setSignatureName] = useState(getWidth());\n\n  async function handleSave() {\n    const dataURL = signCanvas.current.getCanvas().toDataURL();\n    const { blob, headers } = await getBlobAndHeader(dataURL);\n    const res = await service.upload(blob, headers);\n    const { result } = res;\n    if (result.id) {\n      const data = {\n        id: record.current.id,\n        version: record.current.version,\n        [params.current.field]: { id: result.id },\n      };\n      const updateRes = await service.update(data, params.current.model);\n      if (updateRes.data && updateRes.data[0]) {\n        record.current.version = updateRes.data[0].version;\n      }\n      await service.getAction(\n        \"com.axelor.apps.client.portal.db.PortalQuotation\",\n        \"action-client-portal-method-portal-quotation-confirm\",\n        {\n          context: {\n            id,\n            signatureName,\n          },\n        }\n      );\n      const buttons =\n        window.top.document.getElementsByClassName(\"button-close\");\n      for (let i = 0; i < buttons.length; i++) {\n        if (buttons[i]) {\n          buttons[i].click();\n        }\n      }\n    }\n  }\n\n  const handleClear = () => signCanvas.current.clear();\n\n  React.useEffect(() => {\n    const _params = {};\n    const regex = /[?&]([^=#]+)=([^&#]*)/g;\n    const url = window.location.href;\n    let match = regex.exec(url);\n    while (match) {\n      _params[match[1]] = match[2];\n      match = regex.exec(url);\n    }\n    params.current = _params;\n    setId(_params.id);\n    setSignatureName(_params.signatureName);\n    service.get(_params.model, _params.id).then((res) => {\n      if (res.data && res.data[0]) {\n        record.current = res.data[0];\n        if (record.current[_params.field]) {\n          const id = `${record.current[_params.field].id}`;\n          service.download(getUrl(id)).then((res) => {\n            res.blob().then((resb) => {\n              let reader = new FileReader();\n              reader.readAsDataURL(resb);\n              reader.onloadend = () => {\n                const base64data = reader.result;\n                signCanvas.current.fromDataURL(base64data);\n              };\n            });\n          });\n        }\n      }\n    });\n  }, [service]);\n\n  React.useEffect(() => {\n    const updateWidth = () => {\n      setWidth(getWidth());\n    };\n    window.addEventListener(\"resize\", updateWidth);\n    return () => {\n      window.removeEventListener(\"resize\", updateWidth);\n    };\n  });\n\n  return (\n    <div>\n      <div className=\"App\">\n        <SignatureCanvas\n          ref={(ref) => (signCanvas.current = ref)}\n          canvasProps={{ width: width, height: 400, className: \"sigCanvas\" }}\n        />\n      </div>\n      <div className=\"action-buttons\">\n        <button type=\"button\" onClick={handleSave} className=\"save-button\">\n          {translate(\"Save\")}\n        </button>\n        <button type=\"button\" onClick={handleClear} className=\"clear-button\">\n          {translate(\"Clear\")}\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}