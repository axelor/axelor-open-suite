<?xml version="1.0" encoding="UTF-8"?>
<domain-models xmlns="http://axelor.com/xml/ns/domain-models"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://axelor.com/xml/ns/domain-models http://axelor.com/xml/ns/domain-models/domain-models_7.1.xsd">

  <module name="stock" package="com.axelor.apps.stock.db"/>

  <entity name="StockMoveLine">

    <many-to-one name="saleOrderLine" ref="com.axelor.apps.sale.db.SaleOrderLine"
      title="Sales order line"/>
    <many-to-one name="purchaseOrderLine"
      ref="com.axelor.apps.purchase.db.PurchaseOrderLine" title="Purchase order line"/>

    <decimal name="reservedQty" title="Allocated Qty" precision="20" scale="10"/>
    <decimal name="requestedReservedQty" title="Requested reserved qty" precision="20"
      scale="10"/>

    <decimal name="qtyInvoiced" title="Invoiced Qty" precision="20" scale="10"/>

    <boolean name="isQtyRequested" readonly="true" title="Quantity requested"/>

    <!-- Is not used in view but needed for java service -->
    <boolean name="isMergedStockMoveLine" transient="true"/>

    <datetime name="reservationDateTime" readonly="true"/>


    <finder-method name="findForDeclarationOfExchanges"
      using="LocalDate:fromDate,LocalDate:toDate,String:productTypeSelect,int:stockMoveTypeSelect,com.axelor.apps.base.db.Country:country,com.axelor.apps.base.db.Company:company "
      filter="
	        self.stockMove.realDate BETWEEN :fromDate AND :toDate
	        AND self.product.usedInDEB is true
	        AND self.product.productTypeSelect = :productTypeSelect
	        AND self.stockMove.typeSelect = :stockMoveTypeSelect
	        AND self.stockMove.statusSelect = 3
	        AND self.stockMove.company = :company
	        AND (COALESCE(self.stockMove.fromAddress.country, self.fromStockLocation.address.country) = :country
	        OR COALESCE(self.stockMove.toAddress.country, self.toStockLocation.address.country) = :country)
	        AND COALESCE(self.stockMove.fromAddress.country, self.fromStockLocation.address.country)
	        != COALESCE(self.stockMove.toAddress.country, self.toStockLocation.address.country)
	        AND COALESCE(self.stockMove.fromAddress.country.economicArea, self.stockMove.fromStockLocation.address.country.economicArea)
	        = COALESCE(self.stockMove.toAddress.country.economicArea, self.toStockLocation.address.country.economicArea)
	        AND ((self.saleOrderLine IS NULL AND self.purchaseOrderLine IS NULL)
	          OR (self.saleOrderLine IS NOT NULL AND (self.saleOrderLine.saleOrder.taxNumber IS NULL OR self.saleOrderLine.saleOrder.taxNumber.includeInDEB = true))
	          OR (self.purchaseOrderLine IS NOT NULL AND (self.purchaseOrderLine.purchaseOrder.taxNumber IS NULL OR self.purchaseOrderLine.purchaseOrder.taxNumber.includeInDEB = true)))"
      orderBy="stockMove.realDate,id" all="true"/>

    <track on="UPDATE">
      <field name="requestedReservedQty"/>
      <field name="reservedQty"/>
    </track>

  </entity>

</domain-models>
