<?xml version="1.0" encoding="UTF-8"?>
<csv-inputs xmlns="http://axelor.com/xml/ns/data-import"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://axelor.com/xml/ns/data-import http://axelor.com/xml/ns/data-import/data-import_7.4.xsd">

  <input file="studio_appPurchase.csv" separator=";" type="com.axelor.studio.db.AppPurchase"
    search="self.app.code = :code"/>

  <input file="purchase_purchaseConfig.csv" separator=";"
    type="com.axelor.apps.purchase.db.PurchaseConfig" search="self.importId = :importId">
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.utils.helpers.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Company', 'importId', company_importId)"
      check-message="Company doesn't exist"/>
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.apps.purchase.db.PurchaseConfig', 'importId', importId, 'company.importId', company_importId)"
      check-message="Company must be unique"/>
    <bind column="purchaseOrderInAtiSelect" to="purchaseOrderInAtiSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.purchase.db.PurchaseConfig', 'purchaseOrderInAtiSelect', purchaseOrderInAtiSelect)"
      check-message="Invalid purchaseOrderInAtiSelect"/>
  </input>

  <input file="purchase_purchaseOrder.csv" separator=";"
    type="com.axelor.apps.purchase.db.PurchaseOrder" search="self.importId = :importId">
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.utils.helpers.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Company', 'importId', company_importId)"
      check-message="Company doesn't exist"/>
    <bind column="supplierPartner_importId" to="supplierPartner"
      search="self.importId = :supplierPartner_importId"
      check="com.axelor.utils.helpers.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Partner', 'importId', supplierPartner_importId)"
      check-message="Supplier doesn't exist"/>
    <bind column="currency_code" to="currency" search="self.code = :currency_code"
      check="com.axelor.utils.helpers.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Currency', 'code', currency_code)"
      check-message="Currency doesn't exist"/>
    <bind column="statusSelect" to="statusSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.purchase.db.PurchaseOrder', 'statusSelect', statusSelect)"
      check-message="Invalid statusSelect"/>
    <bind column="receiptState" to="receiptState"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.purchase.db.PurchaseOrder', 'receiptState', receiptState)"
      check-message="Invalid receiptState"/>
    <bind column="typeSelect" to="typeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.purchase.db.PurchaseOrder', 'typeSelect', typeSelect)"
      check-message="Invalid typeSelect"/>
    <bind column="purchaseOrderSeq" to="purchaseOrderSeq"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.apps.purchase.db.PurchaseOrder', 'importId', importId, 'purchaseOrderSeq, company.importId', purchaseOrderSeq, company_importId)"
      check-message="Purchase order seq and company must be unique"/>
    <bind to="createdOn"
      eval="call:com.axelor.csv.script.ImportDateTime:importDateTime(creationDate)"
      column="creationDate"/>
    <bind to="estimatedReceiptDate"
      eval="call:com.axelor.csv.script.ImportDateTime:importDate(estimatedReceiptDate)"
      column="estimatedReceiptDate"/>
    <bind to="orderDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(orderDate)"
      column="orderDate"/>
  </input>

  <input file="purchase_purchaseOrderLine.csv" separator=";"
    type="com.axelor.apps.purchase.db.PurchaseOrderLine"
    call="com.axelor.apps.purchase.script.ImportPurchaseOrderLine:importPurchaseOrderLine">
    <bind column="productName" to="productName"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(productName)"
      check-message="Displayed product name must not be null"/>
    <bind column="discountTypeSelect" to="discountTypeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.purchase.db.PurchaseOrderLine', 'discountTypeSelect', discountTypeSelect)"
      check-message="Invalid discountTypeSelect"/>
    <bind to="desiredReceiptDate"
      eval="call:com.axelor.csv.script.ImportDateTime:importDateTime(desiredReceiptDate)"
      column="desiredReceiptDate"/>
    <bind to="estimatedReceiptDate"
      eval="call:com.axelor.csv.script.ImportDateTime:importDate(estimatedReceiptDate)"
      column="estimatedReceiptDate"/>
    <bind search="self.importId in :taxLineSet_importId" to="taxLineSet"
      column="taxLineSet_importId" eval="taxLineSet_importId.split('\\|') as List"/>
  </input>

  <input file="purchase_supplierCatalog.csv" separator=";"
    type="com.axelor.apps.purchase.db.SupplierCatalog"
    call="com.axelor.apps.purchase.script.ImportSupplierCatalog:importSupplierCatalog">
    <bind column="supplierPartner_importId" to="supplierPartner"
      search="self.importId = :supplierPartner_importId"
      check="com.axelor.utils.helpers.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Partner', 'importId', supplierPartner_importId)"
      check-message="Supplier doesn't exist"/>
    <bind column="product_importId" to="product" search="self.importId = :product_importId"
      check="com.axelor.utils.helpers.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Product', 'importId', product_importId)"
      check-message="Product doesn't exist"/>
  </input>

  <input file="base_sequence.csv" separator=";" type="com.axelor.apps.base.db.Sequence"
    search="self.importId = :importId" call="com.axelor.csv.script.ImportSequence:importSequence">
    <bind column="codeSelect" to="codeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.Sequence', 'codeSelect', codeSelect)"
      check-message="Invalid codeSelect"/>
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="sequenceTypeSelect" to="sequenceTypeSelect"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(sequenceTypeSelect)"
      check-message="Sequence type must not be null"/>
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Sequence', 'importId', importId, 'company.importId, codeSelect, prefixe, suffixe', company_importId, codeSelect, prefixe, suffixe)"
      check-message="Company, code, prefixe and suffixe must be unique"/>
    <bind to="yearlyResetOk" column="yearlyResetOk" eval="yearlyResetOk == '1' ? true : false"
      if="yearlyResetOk"/>
    <bind to="nextNum" column="nextNum" eval="nextNum?.empty ? '1' : nextNum"/>
    <bind to="padding" column="padding" eval="padding?.empty ? '1' : padding"/>
    <bind to="toBeAdded" column="toBeAdded" eval="toBeAdded?.empty ? '1' : toBeAdded"/>
    <bind to="resetDate"
      eval="call:com.axelor.apps.base.service.app.AppBaseService:getTodayDate(null)"/>
  </input>

  <input file="purchase_purchaseOrder.csv" separator=";"
    type="com.axelor.apps.purchase.db.PurchaseOrder" search="self.importId = :importId"
    call="com.axelor.apps.purchase.script.ImportPurchaseOrder:importPurchaseOrder">
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.utils.helpers.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Company', 'importId', company_importId)"
      check-message="Company doesn't exist"/>
    <bind column="supplierPartner_importId" to="supplierPartner"
      search="self.importId = :supplierPartner_importId"
      check="com.axelor.utils.helpers.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Partner', 'importId', supplierPartner_importId)"
      check-message="Supplier doesn't exist"/>
    <bind column="currency_code" to="currency" search="self.code = :currency_code"
      check="com.axelor.utils.helpers.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Currency', 'code', currency_code)"
      check-message="Currency doesn't exist"/>
    <bind column="statusSelect" to="statusSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.purchase.db.PurchaseOrder', 'statusSelect', statusSelect)"
      check-message="Invalid statusSelect"/>
    <bind column="receiptState" to="receiptState"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.purchase.db.PurchaseOrder', 'receiptState', receiptState)"
      check-message="Invalid receiptState"/>
    <bind column="typeSelect" to="typeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.purchase.db.PurchaseOrder', 'typeSelect', typeSelect)"
      check-message="Invalid typeSelect"/>
    <bind column="purchaseOrderSeq" to="purchaseOrderSeq"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.apps.purchase.db.PurchaseOrder', 'importId', importId, 'purchaseOrderSeq, company.importId', purchaseOrderSeq, company_importId)"
      check-message="Purchase order seq and company must be unique"/>
    <bind to="createdOn"
      eval="call:com.axelor.csv.script.ImportDateTime:importDateTime(creationDate)"
      column="creationDate"/>
    <bind to="estimatedReceiptDate"
      eval="call:com.axelor.csv.script.ImportDateTime:importDate(estimatedReceiptDate)"
      column="estimatedReceiptDate"/>
    <bind to="orderDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(orderDate)"
      column="orderDate"/>
  </input>

  <input file="base_template.csv" separator=";" type="com.axelor.message.db.Template"
    search="self.name = :name">
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="mediaTypeSelect" to="mediaTypeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.message.db.Template', 'mediaTypeSelect', mediaTypeSelect)"
      check-message="Invalid mediaTypeSelect"/>
    <bind column="templateEngineSelect" to="templateEngineSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.message.db.Template', 'templateEngineSelect', templateEngineSelect)"
      check-message="Invalid templateEngineSelect"/>
    <bind column="language" to="language"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.message.db.Template', 'language', language)"
      check-message="Invalid language"/>
    <bind column="printTemplateSet_importId" to="printTemplateSet"
      search="self.importId in :printTemplateSet_importId"
      eval="printTemplateSet_importId.split('\\|') as List" update="true"/>
  </input>

</csv-inputs>

