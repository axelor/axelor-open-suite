<?xml version="1.0" encoding="UTF-8"?>
<csv-inputs xmlns="http://axelor.com/xml/ns/data-import"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://axelor.com/xml/ns/data-import http://axelor.com/xml/ns/data-import/data-import_7.4.xsd">

  <input file="studio_appSale.csv" separator=";" type="com.axelor.studio.db.AppSale"
    search="self.app.code = :code" update="true">
    <bind column="salespersonSelect" to="salespersonSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('sale.order.fill.salesperson.select', salespersonSelect, false)"
      check-message="Invalid salespersonSelect :salespersonSelect"/>
    <bind column="listDisplayTypeSelect" to="listDisplayTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('sale.app.sale.line.display.type.select', listDisplayTypeSelect, false)"
      check-message="Invalid listDisplayTypeSelect :listDisplayTypeSelect"/>
  </input>

  <input file="base_sequence.csv" separator=";" type="com.axelor.apps.base.db.Sequence"
    search="self.importId = :importId" call="com.axelor.csv.script.ImportSequence:importSequence">
    <bind column="codeSelect" to="codeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('sequence.generic.code.select', codeSelect, true)"
      check-message="Invalid codeSelect :codeSelect"/>
    <bind column="name" to="name"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="sequenceTypeSelect" to="sequenceTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(sequenceTypeSelect)"
      check-message="Sequence type must not be null"/>
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Sequence', 'importId', importId, 'company.importId, codeSelect, prefixe, suffixe', company_importId, codeSelect, prefixe, suffixe)"
      check-message="Company, code, prefixe and suffixe must be unique"/>
    <bind to="yearlyResetOk" column="yearlyResetOk" eval="yearlyResetOk == '1' ? true : false"
      if="yearlyResetOk"/>
    <bind to="nextNum" column="nextNum" eval="nextNum?.empty ? '1' : nextNum"/>
    <bind to="padding" column="padding" eval="padding?.empty ? '1' : padding"/>
    <bind to="toBeAdded" column="toBeAdded" eval="toBeAdded?.empty ? '1' : toBeAdded"/>
    <bind to="resetDate"
      eval="call:com.axelor.apps.base.service.app.AppBaseService:getTodayDate(null)"/>
  </input>

  <input file="sale_cancelReason.csv" separator=";"
    type="com.axelor.apps.base.db.CancelReason">
    <bind column="name" to="name"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind to="freeText" eval="freeText == 'true' ? true : false"/>
    <bind to="applicationType" eval="'com.axelor.apps.sale.db.SaleOrder'"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('base.cancel.reason.application.type.select', 'com.axelor.apps.sale.db.SaleOrder', false)"
      check-message="Invalid applicationType :applicationType"/>
  </input>

  <input file="sale_saleBatch.csv" separator=";" type="com.axelor.apps.sale.db.SaleBatch"
    search="self.code = :code">
    <bind column="actionSelect" to="actionSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('sale.batch.action.select', actionSelect, true)"
      check-message="Invalid actionSelect :actionSelect"/>
  </input>

  <input file="sale_saleConfig.csv" separator=";" type="com.axelor.apps.sale.db.SaleConfig"
    search="self.importId = :importId">
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Company', 'importId', company_importId)"
      check-message="Company with importId :company_importId doesn't exist"/>
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.sale.db.SaleConfig', 'importId', importId, 'company.importId', company_importId)"
      check-message="Company must be unique"/>
    <bind column="saleOrderInAtiSelect" to="saleOrderInAtiSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('base.in.ati.select', saleOrderInAtiSelect, false)"
      check-message="Invalid saleOrderInAtiSelect :saleOrderInAtiSelect"/>
    <bind column="cartOrderCreationModeSelect" to="cartOrderCreationModeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('cart.order.creation.mode.select', cartOrderCreationModeSelect, false)"
      check-message="Invalid cartOrderCreationModeSelect :cartOrderCreationModeSelect"/>
  </input>

  <input file="sale_saleOrder.csv" separator=";" search="self.importId = :importId"
    type="com.axelor.apps.sale.db.SaleOrder">
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Company', 'importId', company_importId)"
      check-message="Company with importId :company_importId doesn't exist"/>
    <bind column="statusSelect" to="statusSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('sale.order.status.select', saleOrderTypeSelect, false)"
      check-message="Invalid statusSelect :statusSelect"/>
    <bind column="discountTypeSelect" to="discountTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('base.price.list.line.amount.type.select', discountTypeSelect, false)"
      check-message="Invalid discountTypeSelect :discountTypeSelect"/>
    <bind column="periodicityTypeSelect" to="periodicityTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('sale.subscription.periodicity.type.select', periodicityTypeSelect, false)"
      check-message="Invalid periodicityTypeSelect :periodicityTypeSelect"/>
    <bind column="orderingStatus" to="orderingStatus"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('sale.sale.order.ordering.status.select', orderingStatus, false)"
      check-message="Invalid orderingStatus :orderingStatus"/>
    <bind column="saleOrderSeq" to="saleOrderSeq"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.sale.db.SaleOrder', 'importId', importId, 'saleOrderSeq, company.importId', saleOrderSeq, company_importId)"
      check-message="Sale order seq and company must be unique"/>
    <bind to="creationDate"
      eval="call:com.axelor.csv.script.ImportDateTime:importDate(creationDate)"
      column="creationDate"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(creationDate)"
      check-message="Creation date must not be null"/>
    <bind to="confirmationDateTime"
      eval="call:com.axelor.csv.script.ImportDateTime:importDateTime(confirmationDateTime)"
      column="confirmationDateTime"/>
    <bind to="shipmentDate"
      eval="call:com.axelor.csv.script.ImportDateTime:importDate(shipmentDate)"
      column="shipmentDate"/>
  </input>

  <input file="sale_saleOrderLine.csv" separator=";"
    type="com.axelor.apps.sale.db.SaleOrderLine" search="self.importId = :importId"
    call="com.axelor.csv.script.ImportSaleOrderLine:importSaleOrderLine">
    <bind column="productName" to="productName"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(productName)"
      check-message="Displayed product name must not be null"/>
    <bind column="discountTypeSelect" to="discountTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('base.price.list.line.amount.type.select', discountTypeSelect, false)"
      check-message="Invalid discountTypeSelect :discountTypeSelect"/>
    <bind column="typeSelect" to="typeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('line.type.select', typeSelect, false)"
      check-message="Invalid typeSelect :typeSelect"/>
    <bind column="productTypeIconSelect" to="productTypeIconSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('sale.sale.order.line.product.sub.type.icon.select', productTypeIconSelect, false)"
      check-message="Invalid productTypeIconSelect :productTypeIconSelect"/>
    <bind to="priceDiscounted" eval="price"/>
  </input>

  <input file="sale_saleOrder.csv" separator=";" search="self.importId = :importId"
    type="com.axelor.apps.sale.db.SaleOrder"
    call="com.axelor.csv.script.ImportSaleOrder:importSaleOrder">
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Company', 'importId', company_importId)"
      check-message="Company with importId :company_importId doesn't exist"/>
    <bind column="statusSelect" to="statusSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('sale.order.status.select', saleOrderTypeSelect, false)"
      check-message="Invalid statusSelect :statusSelect"/>
    <bind column="discountTypeSelect" to="discountTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('base.price.list.line.amount.type.select', discountTypeSelect, false)"
      check-message="Invalid discountTypeSelect :discountTypeSelect"/>
    <bind column="periodicityTypeSelect" to="periodicityTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('sale.subscription.periodicity.type.select', periodicityTypeSelect, false)"
      check-message="Invalid periodicityTypeSelect :periodicityTypeSelect"/>
    <bind column="orderingStatus" to="orderingStatus"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('sale.sale.order.ordering.status.select', orderingStatus, false)"
      check-message="Invalid orderingStatus :orderingStatus"/>
    <bind column="saleOrderSeq" to="saleOrderSeq"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.sale.db.SaleOrder', 'importId', importId, 'saleOrderSeq, company.importId', saleOrderSeq, company_importId)"
      check-message="Sale order seq and company must be unique"/>
    <bind to="creationDate"
      eval="call:com.axelor.csv.script.ImportDateTime:importDate(creationDate)"
      column="creationDate"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(creationDate)"
      check-message="Creation date must not be null"/>
    <bind to="confirmationDateTime"
      eval="call:com.axelor.csv.script.ImportDateTime:importDateTime(confirmationDateTime)"
      column="confirmationDateTime"/>
    <bind to="shipmentDate"
      eval="call:com.axelor.csv.script.ImportDateTime:importDate(shipmentDate)"
      column="shipmentDate"/>
  </input>

  <input file="base_template_context.csv" separator=";"
    type="com.axelor.message.db.TemplateContext" search="self.name = :name">
    <bind column="name" to="name"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="validationMethodSelect" to="validationMethodSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('base.registration.number.template.validation.method.select', validationMethodSelect, false)"
      check-message="Invalid validationMethodSelect :validationMethodSelect"/>
  </input>

  <input file="base_template.csv" separator=";" type="com.axelor.message.db.Template"
    search="self.name = :name">
    <bind column="name" to="name"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="mediaTypeSelect" to="mediaTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('message.media.type.select', mediaTypeSelect, true)"
      check-message="Invalid mediaTypeSelect :mediaTypeSelect"/>
    <bind column="templateEngineSelect" to="templateEngineSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('template.engine.select', templateEngineSelect, false)"
      check-message="Invalid templateEngineSelect :templateEngineSelect"/>
    <bind column="language" to="language"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('select.language', language, false)"
      check-message="Invalid language :language"/>
    <bind to="templateContextList" search="self.name = :templateContext"
      if="templateContext != null &amp;&amp; !templateContext.empty"/>
    <bind column="printTemplateSet_importId" to="printTemplateSet"
      search="self.importId in :printTemplateSet_importId"
      eval="printTemplateSet_importId.split('\\|') as List" update="true"/>
  </input>

  <input file="base_mail_template_association.csv" separator=";"
    type="com.axelor.apps.base.db.MailTemplateAssociation" search="self.model.name = :model">
    <bind to="model" column="model" search="self.name = :model"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.meta.db.MetaModel', 'name', model)"
      check-message="Object with name :model doesn't exist"/>
    <bind to="emailTemplate" column="template" search="self.name = :template"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.message.db.Template', 'name', template)"
      check-message="Email template with name :template doesn't exist"/>
  </input>

  <input file="studio_appBase.csv" separator=";" type="com.axelor.studio.db.AppBase"
    search="self.app.code = :code">
    <bind column="mapApiSelect" to="mapApiSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('base.app.base.map.api.select', mapApiSelect, false)"
      check-message="Invalid mapApiSelect :mapApiSelect"/>
    <bind column="currencyWsURL" to="currencyWsURL"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('base.app.base.currency.api.select', currencyWsURL, false)"
      check-message="Invalid currencyWsURL :currencyWsURL"/>
    <bind column="productInAtiSelect" to="productInAtiSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('base.in.ati.select', productInAtiSelect, false)"
      check-message="Invalid productInAtiSelect :productInAtiSelect"/>
    <bind column="regroupProductsTypeSelect" to="regroupProductsTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('base.app.base.regroup.products.type.select', regroupProductsTypeSelect, false)"
      check-message="Invalid regroupProductsTypeSelect :regroupProductsTypeSelect"/>
    <bind column="regroupProductsLevelSelect" to="regroupProductsLevelSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('base.app.base.regroup.products.level.select', regroupProductsLevelSelect, false)"
      check-message="Invalid regroupProductsLevelSelect :regroupProductsLevelSelect"/>
    <bind column="computeMethodDiscountSelect" to="computeMethodDiscountSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('base.compute.method.discount.select', computeMethodDiscountSelect, false)"
      check-message="Invalid computeMethodDiscountSelect :computeMethodDiscountSelect"/>
    <bind column="timeLoggingPreferenceSelect" to="timeLoggingPreferenceSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('hr.time.logging.preference.select', timeLoggingPreferenceSelect, false)"
      check-message="Invalid timeLoggingPreferenceSelect :timeLoggingPreferenceSelect"/>
    <bind column="productSequenceTypeSelect" to="productSequenceTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('product.sequence.type.select', productSequenceTypeSelect, false)"
      check-message="Invalid productSequenceTypeSelect :productSequenceTypeSelect"/>
    <bind column="shortcutMultiSelect" to="shortcutMultiSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('base.change.shortcut.select', shortcutMultiSelect, false)"
      check-message="Invalid shortcutMultiSelect :shortcutMultiSelect"/>
    <bind to="mailTemplateAssociationList" column="model" search="self.model.name = :model"
      if="model != null &amp;&amp; !model.empty"/>
  </input>

  <input file="base_pricingRule.csv" separator=";" type="com.axelor.apps.base.db.PricingRule"
    search="self.importId = :importId">
    <bind column="typeSelect" to="typeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('base.pricing.rule.type.select', typeSelect, false)"
      check-message="Invalid typeSelect :typeSelect"/>
    <bind column="fieldTypeSelect" to="fieldTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('base.pricing.rule.field.type.select', fieldTypeSelect, false)"
      check-message="Invalid fieldTypeSelect :fieldTypeSelect"/>
    <bind column="operatorSelect" to="operatorSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('base.pricing.rule.operator.select', operatorSelect, false)"
      check-message="Invalid operatorSelect :operatorSelect"/>
    <bind column="concernedModel" to="concernedModel" search="self.name = :concernedModel"/>
    <bind column="fieldToPopulate" to="fieldToPopulate"
      search="(self.metaModel.name = :concernedModel) AND (self.name = :fieldToPopulate)"
      if="fieldToPopulate"/>
  </input>

  <input file="base_pricing.csv" separator=";" type="com.axelor.apps.base.db.Pricing"
    search="self.importId = :importId">
    <bind column="typeSelect" to="typeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('base.pricing.type.select', typeSelect, true)"
      check-message="Invalid typeSelect :typeSelect"/>
    <bind to="startDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(startDate)"
      column="startDate"/>
  </input>

  <input file="base_pricingLine.csv" separator=";" type="com.axelor.apps.base.db.PricingLine"
    search="self.importId = :importId"/>

  <input file="sale_complementaryProduct.csv" separator=";"
    type="com.axelor.apps.sale.db.ComplementaryProduct" search="self.importId = :importId">
    <bind column="generationTypeSelect" to="generationTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('sale.complementary.product.generation.type.select', generationTypeSelect, false)"
      check-message="Invalid generationTypeSelect :generationTypeSelect"/>
  </input>

  <input file="sale_anonymizer.csv" type="com.axelor.apps.base.db.Anonymizer" separator=";">
    <bind column="name" to="name"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
  </input>

  <input file="sale_anonymizerLine.csv" type="com.axelor.apps.base.db.AnonymizerLine"
    separator=";">
    <bind to="metaModel" column="metaModel" search="self.name = :metaModel"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.meta.db.MetaModel', 'name', metaModel)"
      check-message="Meta model with name :metaModel doesn't exist"/>
    <bind to="metaField" column="metaField"
      search="self.name = :metaField AND self.metaModel.name = :metaModel"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.meta.db.MetaField', 'name, metaModel.name', metaField, metaModel)"
      check-message="Meta field with name :metaField and model :metaModel doesn't exist"/>
    <bind to="anonymizer" column="anonymizer_importId"
      search="self.importId = :anonymizer_importId"/>
    <bind to="useFakeData" column="useFakeData"/>
  </input>

</csv-inputs>
