<?xml version="1.0" encoding="UTF-8"?>
<csv-inputs xmlns="http://axelor.com/xml/ns/data-import"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://axelor.com/xml/ns/data-import http://axelor.com/xml/ns/data-import/data-import_7.4.xsd">

  <input file="stock_stock_location.csv" separator=";"
    type="com.axelor.apps.stock.db.StockLocation" search="self.importId = :importId">
    <bind column="name" to="name"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Company', 'importId', company_importId)"
      check-message="Company with importId :company_importId doesn't exist"/>
    <bind column="typeSelect" to="typeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.stock.db.StockLocation', 'typeSelect', typeSelect)"
      check-message="Invalid typeSelect :typeSelect"/>
  </input>

  <input file="stock_stockRules.csv" separator=";" type="com.axelor.apps.stock.db.StockRules">
    <bind column="stockLocation_importId" to="stockLocation"
      search="self.importId = :stockLocation_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.apps.stock.db.StockLocation', 'importId', stockLocation_importId)"
      check-message="Stock location with importId :stockLocation_importId doesn't exist"/>
    <bind column="product_importId" to="product" search="self.importId = :product_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Product', 'importId', product_importId)"
      check-message="Product with importId :product_importId doesn't exist"/>
    <bind column="minQty" to="minQty"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(minQty)"
      check-message="Min. qty must not be null"/>
    <bind column="reOrderQty" to="reOrderQty"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(reOrderQty)"
      check-message="Refill qty must not be null"/>
    <bind column="useCaseSelect" to="useCaseSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.stock.db.StockRules', 'useCaseSelect', useCaseSelect)"
      check-message="Invalid useCaseSelect :useCaseSelect"/>
    <bind column="orderAlertSelect" to="orderAlertSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.stock.db.StockRules', 'orderAlertSelect', orderAlertSelect)"
      check-message="Invalid orderAlertSelect :orderAlertSelect"/>
    <bind column="typeSelect" to="typeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.stock.db.StockRules', 'typeSelect', typeSelect)"
      check-message="Invalid typeSelect :typeSelect"/>
  </input>

  <input file="base_sequence.csv" separator=";" type="com.axelor.apps.base.db.Sequence"
    search="self.importId = :importId" call="com.axelor.csv.script.ImportSequence:importSequence">
    <bind column="codeSelect" to="codeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.base.db.Sequence', 'codeSelect', codeSelect)"
      check-message="Invalid codeSelect :codeSelect"/>
    <bind column="name" to="name"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="sequenceTypeSelect" to="sequenceTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(sequenceTypeSelect)"
      check-message="Sequence type must not be null"/>
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Sequence', 'importId', importId, 'company.importId, codeSelect, prefixe, suffixe', company_importId, codeSelect, prefixe, suffixe)"
      check-message="Company, code, prefixe and suffixe must be unique"/>
  </input>

  <input file="stock_trackingNumberConfig.csv" separator=";"
    type="com.axelor.apps.stock.db.TrackingNumberConfiguration" search="self.importId = :importId"
    call="com.axelor.csv.script.ImportTrackingNumberConfig:computeFullName">
    <bind column="name" to="name"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="saleAutoTrackingNbrOrderSelect" to="saleAutoTrackingNbrOrderSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.stock.db.TrackingNumberConfiguration', 'saleAutoTrackingNbrOrderSelect', saleAutoTrackingNbrOrderSelect)"
      check-message="Invalid saleAutoTrackingNbrOrderSelect :saleAutoTrackingNbrOrderSelect"/>
    <bind column="productAutoTrackingNbrOrderSelect" to="productAutoTrackingNbrOrderSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.stock.db.TrackingNumberConfiguration', 'productAutoTrackingNbrOrderSelect', productAutoTrackingNbrOrderSelect)"
      check-message="Invalid productAutoTrackingNbrOrderSelect :productAutoTrackingNbrOrderSelect"/>
  </input>

  <input file="stock_inventory.csv" separator=";" type="com.axelor.apps.stock.db.Inventory"
    search="self.importId = :importId" call="com.axelor.csv.script.ImportInventory:importInventory">
    <bind column="typeSelect" to="typeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.stock.db.Inventory', 'typeSelect', typeSelect)"
      check-message="Invalid typeSelect :typeSelect"/>
    <bind column="statusSelect" to="statusSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.stock.db.Inventory', 'statusSelect', statusSelect)"
      check-message="Invalid statusSelect :statusSelect"/>
    <bind column="formatSelect" to="formatSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.stock.db.Inventory', 'formatSelect', formatSelect)"
      check-message="Invalid formatSelect :formatSelect"/>
    <bind column="plannedStartDateT" to="plannedStartDateT"
      eval="call:com.axelor.csv.script.ImportDateTime:importDate(plannedStartDateT)"/>
    <bind column="plannedEndDateT" to="plannedEndDateT"
      eval="call:com.axelor.csv.script.ImportDateTime:importDate(plannedEndDateT)"/>
    <bind to="stockLocation" column="stockLocation_importId"
      search="self.importId = :stockLocation_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.apps.stock.db.StockLocation', 'importId', stockLocation_importId)"
      check-message="Stock location with importId :stockLocation_importId doesn't exist"/>
    <bind to="company" column="company_importId" search="self.importId = :company_importId"/>
    <bind column="inventorySeq" to="inventorySeq"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.stock.db.Inventory', 'importId', importId, 'inventorySeq, stockLocation.importId', inventorySeq, stockLocation_importId)"
      check-message="Inventory NÂ° and stock location must be unique"/>
  </input>

  <input file="stock_stockConfig.csv" separator=";"
    type="com.axelor.apps.stock.db.StockConfig" search="self.importId = :importId">
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Company', 'importId', company_importId)"
      check-message="Company with importId :company_importId doesn't exist"/>
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.stock.db.StockConfig', 'importId', importId, 'company.importId', company_importId)"
      check-message="Company must be unique"/>
    <bind column="stockValuationTypeSelect" to="stockValuationTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.stock.db.StockConfig', 'stockValuationTypeSelect', stockValuationTypeSelect)"
      check-message="Invalid stockValuationTypeSelect :stockValuationTypeSelect"/>
    <bind column="inventoryValuationTypeSelect" to="inventoryValuationTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.stock.db.StockConfig', 'inventoryValuationTypeSelect', inventoryValuationTypeSelect)"
      check-message="Invalid inventoryValuationTypeSelect :inventoryValuationTypeSelect"/>
  </input>

  <input file="stock_customsCodeNomenclature.csv" separator=";"
    type="com.axelor.apps.stock.db.CustomsCodeNomenclature" search="self.code = :code">
    <bind to="parentCustomsCode" search="self.code = :parentCode" if="parentCode"/>
  </input>

  <input file="base_product.csv" separator=";" type="com.axelor.apps.base.db.Product"
    update="true" search="self.importId = :importId">
    <bind column="code" to="code"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Product', 'importId', importId, 'code', code)"
      check-message="Code must be unique"/>
    <bind column="serialNumber" to="serialNumber"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Product', 'importId', importId, 'serialNumber', serialNumber)"
      check-message="Serial number must be unique"/>
    <bind column="saleSupplySelect" to="saleSupplySelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.base.db.Product', 'saleSupplySelect', saleSupplySelect)"
      check-message="Invalid saleSupplySelect :saleSupplySelect"/>
    <bind column="productTypeSelect" to="productTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.base.db.Product', 'productTypeSelect', productTypeSelect)"
      check-message="Invalid productTypeSelect :productTypeSelect"/>
    <bind column="procurementMethodSelect" to="procurementMethodSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.base.db.Product', 'procurementMethodSelect', procurementMethodSelect)"
      check-message="Invalid procurementMethodSelect :procurementMethodSelect"/>
    <bind column="productSubTypeSelect" to="productSubTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.base.db.Product', 'productSubTypeSelect', productSubTypeSelect)"
      check-message="Invalid productSubTypeSelect :productSubTypeSelect"/>
    <bind column="inventoryTypeSelect" to="inventoryTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.base.db.Product', 'inventoryTypeSelect', inventoryTypeSelect)"
      check-message="Invalid inventoryTypeSelect :inventoryTypeSelect"/>
    <bind column="versionSelect" to="versionSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.base.db.Product', 'versionSelect', versionSelect)"
      check-message="Invalid versionSelect :versionSelect"/>
    <bind column="costTypeSelect" to="costTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.base.db.Product', 'costTypeSelect', costTypeSelect)"
      check-message="Invalid costTypeSelect :costTypeSelect"/>
    <bind to="customsCodeNomenclature" search="self.code = :customsCodeNomenclature_code"
      if="usedInDEB" update="true"/>
  </input>

  <input file="stock_inventoryLine.csv" separator=";"
    type="com.axelor.apps.stock.db.InventoryLine"
    call="com.axelor.csv.script.ImportInventoryLine:importInventoryLine">
    <bind column="product_importId" to="product" search="self.importId = :product_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Product', 'importId', product_importId)"
      check-message="Product with importId :product_importId doesn't exist"/>
    <bind to="stockLocation" column="stockLocation_importId"
      search="self.importId = :stockLocation_importId"/>
  </input>

  <input file="stock_inventory.csv" separator=";" type="com.axelor.apps.stock.db.Inventory"
    search="self.importId = :importId"
    call="com.axelor.csv.script.ImportInventory:validateInventory">
    <bind column="typeSelect" to="typeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.stock.db.Inventory', 'typeSelect', typeSelect)"
      check-message="Invalid typeSelect :typeSelect"/>
    <bind column="statusSelect" to="statusSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.stock.db.Inventory', 'statusSelect', statusSelect)"
      check-message="Invalid statusSelect :statusSelect"/>
    <bind column="formatSelect" to="formatSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.stock.db.Inventory', 'formatSelect', formatSelect)"
      check-message="Invalid formatSelect :formatSelect"/>
    <bind to="stockLocation" column="stockLocation_importId"
      search="self.importId = :stockLocation_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.apps.stock.db.StockLocation', 'importId', stockLocation_importId)"
      check-message="Stock location with importId :stockLocation_importId doesn't exist"/>
    <bind column="inventorySeq" to="inventorySeq"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.stock.db.Inventory', 'importId', importId, 'inventorySeq, stockLocation.importId', inventorySeq, stockLocation_importId)"
      check-message="Inventory NÂ° and stock location must be unique"/>
    <bind column="plannedEndDateT" to="plannedEndDateT"
      eval="call:com.axelor.csv.script.ImportDateTime:importDate(plannedEndDateT)"/>
    <bind column="plannedStartDateT" to="plannedStartDateT"
      eval="call:com.axelor.csv.script.ImportDateTime:importDate(plannedStartDateT)"/>
  </input>

  <input file="stock_incoterm.csv" separator=";" type="com.axelor.apps.stock.db.Incoterm">
    <bind to="fullname" eval="code+' - '+name"/>
    <bind column="name" to="name"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="code" to="code"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(code)"
      check-message="Code must not be null"/>
    <bind column="exportCustomsDeclaration" to="exportCustomsDeclaration"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.stock.db.Incoterm', 'exportCustomsDeclaration', exportCustomsDeclaration)"
      check-message="Invalid exportCustomsDeclaration :exportCustomsDeclaration"/>
    <bind column="carriageToPortOfExport" to="carriageToPortOfExport"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.stock.db.Incoterm', 'carriageToPortOfExport', carriageToPortOfExport)"
      check-message="Invalid carriageToPortOfExport :carriageToPortOfExport"/>
    <bind column="unloadingOfTruckInPortOfExport" to="unloadingOfTruckInPortOfExport"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.stock.db.Incoterm', 'unloadingOfTruckInPortOfExport', unloadingOfTruckInPortOfExport)"
      check-message="Invalid unloadingOfTruckInPortOfExport :unloadingOfTruckInPortOfExport"/>
    <bind column="loadingInPortOfExport" to="loadingInPortOfExport"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.stock.db.Incoterm', 'loadingInPortOfExport', loadingInPortOfExport)"
      check-message="Invalid loadingInPortOfExport :loadingInPortOfExport"/>
    <bind column="carriageToPortOfImport" to="carriageToPortOfImport"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.stock.db.Incoterm', 'carriageToPortOfImport', carriageToPortOfImport)"
      check-message="Invalid carriageToPortOfImport :carriageToPortOfImport"/>
    <bind column="insurance" to="insurance"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.stock.db.Incoterm', 'insurance', insurance)"
      check-message="Invalid insurance :insurance"/>
    <bind column="unloadingInPortOfImport" to="unloadingInPortOfImport"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.stock.db.Incoterm', 'unloadingInPortOfImport', unloadingInPortOfImport)"
      check-message="Invalid unloadingInPortOfImport :unloadingInPortOfImport"/>
    <bind column="loadingOnTruckInPortOfImport" to="loadingOnTruckInPortOfImport"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.stock.db.Incoterm', 'loadingOnTruckInPortOfImport', loadingOnTruckInPortOfImport)"
      check-message="Invalid loadingOnTruckInPortOfImport :loadingOnTruckInPortOfImport"/>
    <bind column="carriageToPlaceOfDestination" to="carriageToPlaceOfDestination"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.stock.db.Incoterm', 'carriageToPlaceOfDestination', carriageToPlaceOfDestination)"
      check-message="Invalid carriageToPlaceOfDestination :carriageToPlaceOfDestination"/>
    <bind column="importCustomsClearance" to="importCustomsClearance"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.stock.db.Incoterm', 'importCustomsClearance', importCustomsClearance)"
      check-message="Invalid importCustomsClearance :importCustomsClearance"/>
    <bind column="importDutiesAndTaxes" to="importDutiesAndTaxes"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.stock.db.Incoterm', 'importDutiesAndTaxes', importDutiesAndTaxes)"
      check-message="Invalid importDutiesAndTaxes :importDutiesAndTaxes"/>
  </input>

  <input file="base_partner.csv" separator=";" type="com.axelor.apps.base.db.Partner"
    search="self.importId = :importId" call="com.axelor.csv.script.ImportPartner:importPartner">
    <bind column="name" to="name"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(name)"
      check-message="Name/Company name must not be null"/>
    <bind column="partnerSeq" to="partnerSeq"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Partner', 'importId', importId, 'partnerSeq', partnerSeq)"
      check-message="Reference must be unique"/>
    <bind column="partnerTypeSelect" to="partnerTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.base.db.Partner', 'partnerTypeSelect', partnerTypeSelect)"
      check-message="Invalid partnerTypeSelect :partnerTypeSelect"/>
    <bind column="titleSelect" to="titleSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.base.db.Partner', 'titleSelect', titleSelect)"
      check-message="Invalid titleSelect :titleSelect"/>
    <bind to="emailAddress" if="email &amp;&amp; email.trim() != ''"
      search="self.partner.importId = :importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Partner', 'importId', importId, 'emailAddress.address', email)"
      check-message="Email address must be unique">
      <bind to="address" column="email"/>
    </bind>
    <bind to="isCarrier" eval="true"/>
  </input>

  <input file="stock_shipmentMode.csv" separator=";"
    type="com.axelor.apps.stock.db.ShipmentMode" search="self.importId = :importId">
    <bind to="product" column="product_importId" search="self.importId = :product_importId"/>
  </input>

  <input file="stock_freightCarrierMode.csv" separator=";"
    type="com.axelor.apps.stock.db.FreightCarrierMode" search="self.importId = :importId"/>

  <input file="base_template.csv" separator=";" type="com.axelor.message.db.Template"
    search="self.name = :name">
    <bind column="name" to="name"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="mediaTypeSelect" to="mediaTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.message.db.Template', 'mediaTypeSelect', mediaTypeSelect)"
      check-message="Invalid mediaTypeSelect :mediaTypeSelect"/>
    <bind column="templateEngineSelect" to="templateEngineSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.message.db.Template', 'templateEngineSelect', templateEngineSelect)"
      check-message="Invalid templateEngineSelect :templateEngineSelect"/>
    <bind column="language" to="language"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.message.db.Template', 'language', language)"
      check-message="Invalid language :language"/>
    <bind column="printTemplateSet_importId" to="printTemplateSet"
      search="self.importId in :printTemplateSet_importId"
      eval="printTemplateSet_importId.split('\\|') as List" update="true"/>
  </input>

  <input file="studio_appStock.csv" separator=";" type="com.axelor.studio.db.AppStock"
    search="self.app.code = :code"/>

  <input file="stock_stockMove.csv" separator=";" type="com.axelor.apps.stock.db.StockMove"
    search="self.importId = :importId" call="com.axelor.csv.script.ImportStockMove:importStockMove">
    <bind to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Company', 'importId', company_importId)"
      check-message="Company with importId :company_importId doesn't exist"/>
    <bind column="statusSelect" to="statusSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.stock.db.StockMove', 'statusSelect', statusSelect)"
      check-message="Invalid statusSelect :statusSelect"/>
    <bind column="typeSelect" to="typeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.stock.db.StockMove', 'typeSelect', typeSelect)"
      check-message="Invalid typeSelect :typeSelect"/>
    <bind column="availableStatusSelect" to="availableStatusSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.stock.db.StockMove', 'availableStatusSelect', availableStatusSelect)"
      check-message="Invalid availableStatusSelect :availableStatusSelect"/>
    <bind column="conformitySelect" to="conformitySelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.stock.db.StockMove', 'conformitySelect', conformitySelect)"
      check-message="Invalid conformitySelect :conformitySelect"/>
    <bind column="stockMoveSeq" to="stockMoveSeq"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.stock.db.StockMove', 'importId', importId, 'stockMoveSeq, company.importId', stockMoveSeq, company_importId)"
      check-message="Ref. and company must be unique"/>
    <bind to="partner" search="self.importId = :partner_importId"/>
  </input>

  <input file="stock_stockMoveLine.csv" separator=";"
    type="com.axelor.apps.stock.db.StockMoveLine" search="self.importId = :importId"
    call="com.axelor.csv.script.ImportStockMoveLine:importStockMoveLine">
    <bind column="productName" to="productName"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(productName)"
      check-message="Title must not be null"/>
    <bind column="availableStatusSelect" to="availableStatusSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.stock.db.StockMoveLine', 'availableStatusSelect', availableStatusSelect)"
      check-message="Invalid availableStatusSelect :availableStatusSelect"/>
    <bind column="conformitySelect" to="conformitySelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.stock.db.StockMoveLine', 'conformitySelect', conformitySelect)"
      check-message="Invalid conformitySelect :conformitySelect"/>
    <bind column="productTypeSelect" to="productTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.stock.db.StockMoveLine', 'productTypeSelect', productTypeSelect)"
      check-message="Invalid productTypeSelect :productTypeSelect"/>
    <bind column="lineTypeSelect" to="lineTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.stock.db.StockMoveLine', 'lineTypeSelect', lineTypeSelect)"
      check-message="Invalid lineTypeSelect :lineTypeSelect"/>
    <bind to="stockMove" search="self.importId = :stockMove_importId"/>
    <bind to="product" search="self.importId = :product_importId"/>
    <bind to="unit" search="self.importId = :unit_importId"/>
  </input>

  <input file="stock_logisticalForm.csv" separator=";"
    type="com.axelor.apps.stock.db.LogisticalForm" search="self.importId = :importId"
    call="com.axelor.csv.script.ImportLogisticalForm:importLogisticalForm">
    <bind to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Company', 'importId', company_importId)"
      check-message="Company with importId :company_importId doesn't exist"/>
    <bind to="deliverToCustomerPartner"
      search="self.importId = :deliverToCustomerPartner_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Partner', 'importId', deliverToCustomerPartner_importId)"
      check-message="Deliver to customer with importId :deliverToCustomerPartner_importId doesn't exist"/>
    <bind column="statusSelect" to="statusSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.stock.db.LogisticalForm', 'statusSelect', statusSelect)"
      check-message="Invalid statusSelect :statusSelect"/>
    <bind column="accountSelectionToCarrierSelect" to="accountSelectionToCarrierSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.stock.db.LogisticalForm', 'accountSelectionToCarrierSelect', accountSelectionToCarrierSelect)"
      check-message="Invalid accountSelectionToCarrierSelect :accountSelectionToCarrierSelect"/>
    <bind column="collectionDate" to="collectionDate"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(collectionDate)"
      check-message="Collection date must not be null"/>
    <bind to="carrierPartner" search="self.importId = :carrierPartner_importId"/>
    <bind to="forwarderPartner" search="self.importId = :forwarderPartner_importId"/>
  </input>

  <input file="stock_logisticalFormLine.csv" separator=";"
    type="com.axelor.apps.stock.db.LogisticalFormLine" search="self.importId = :importId">
    <bind column="typeSelect" to="typeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.stock.db.LogisticalFormLine', 'typeSelect', typeSelect)"
      check-message="Invalid typeSelect :typeSelect"/>
    <bind to="logisticalForm" search="self.importId = :logisticalForm_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.stock.db.LogisticalFormLine', 'importId', importId, 'typeSelect, parcelPalletNumber, logisticalForm.importId, stockMoveId', typeSelect, parcelPalletNumber, logisticalForm_importId, stockMoveId)"
      check-message="Type, parcel/pallet number, logistical form and stock move must be unique"/>
    <bind to="stockMoveLine" search="self.importId = :stockMoveLine_importId"
      if="stockMoveLine_importId"/>
  </input>

  <input file="stock_anonymizer.csv" type="com.axelor.apps.base.db.Anonymizer" separator=";">
    <bind column="name" to="name"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
  </input>

  <input file="stock_anonymizerLine.csv" type="com.axelor.apps.base.db.AnonymizerLine"
    separator=";">
    <bind to="metaModel" column="metaModel" search="self.name = :metaModel"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.meta.db.MetaModel', 'name', metaModel)"
      check-message="Meta model with name :metaModel doesn't exist"/>
    <bind to="metaField" column="metaField"
      search="self.name = :metaField AND self.metaModel.name = :metaModel"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.meta.db.MetaField', 'name, metaModel.name', metaField, metaModel)"
      check-message="Meta field with name :metaField and model :metaModel doesn't exist"/>
    <bind to="anonymizer" column="anonymizer_importId"
      search="self.importId = :anonymizer_importId"/>
    <bind to="useFakeData" column="useFakeData"/>
  </input>

  <input file="stock_stockCorrectionReason.csv" separator=";"
    type="com.axelor.apps.stock.db.StockCorrectionReason" search="self.importId = :importId">
    <bind column="name" to="name"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
  </input>

  <input file="stock_trackingNumberConfigurationProfileFieldFormula.csv" separator=";"
    type="com.axelor.apps.stock.db.TrackingNumberConfigurationProfileFieldFormula"
    search="self.importId = :importId">
    <bind to="metaField" column="metaField"
      search="self.name = :metaField AND self.metaModel.name = :metaModel"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.meta.db.MetaField', 'name, metaModel.name', metaField, metaModel)"
      check-message="Meta field with name :metaField and model :metaModel doesn't exist"/>
  </input>

  <input file="stock_trackingNumberConfigurationProfile.csv" separator=";"
    type="com.axelor.apps.stock.db.TrackingNumberConfigurationProfile"
    search="self.importId = :importId">
    <bind column="name" to="name"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind to="profileFieldFormulaSet" column="profileFieldFormulaSet"
      search="self.importId in :profileFieldFormulaSet"
      eval="profileFieldFormulaSet.split('\\|') as List"/>
  </input>

</csv-inputs>
