<?xml version="1.0" encoding="UTF-8"?>
<csv-inputs xmlns="http://axelor.com/xml/ns/data-import"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://axelor.com/xml/ns/data-import http://axelor.com/xml/ns/data-import/data-import_7.4.xsd">

  <input file="bankpayment_bankOrderEconomicReason.csv" separator=";"
    type="com.axelor.apps.bankpayment.db.BankOrderEconomicReason">
    <bind column="code" to="code"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(name)"
      check-message="Code must not be null"/>
    <bind to="name" eval="label != null &amp;&amp; label != '' ? code + ' - ' + label : code"/>
  </input>

  <input file="bankpayment_bankPaymentConfig.csv" separator=";"
    type="com.axelor.apps.bankpayment.db.BankPaymentConfig" search="self.importId = :importId">
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Company', 'importId', company_importId)"
      check-message="Company with importId :company_importId doesn't exist"/>
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.bankpayment.db.BankPaymentConfig', 'importId', importId, 'company.importId', company_importId)"
      check-message="Company must be unique"/>
  </input>

  <input file="account_accountingBatch.csv" separator=";"
    type="com.axelor.apps.account.db.AccountingBatch" search="self.code = :code">
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Company', 'importId', company_importId)"
      check-message="Company with importId :company_importId doesn't exist"/>
    <bind column="actionSelect" to="actionSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('iaccounting.batch.action.select', actionSelect, true)"
      check-message="Invalid actionSelect :actionSelect"/>
    <bind column="customerReimbursementTypeSelect" to="customerReimbursementTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('iaccount.account.batch.transfer.customer.reimbursement.type.select', customerReimbursementTypeSelect, true)"
      check-message="Invalid customerReimbursementTypeSelect :customerReimbursementTypeSelect"/>
    <bind column="reimbursementTypeSelect" to="reimbursementTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('ireimbursement.batch.type.select', reimbursementTypeSelect, false)"
      check-message="Invalid reimbursementTypeSelect :reimbursementTypeSelect"/>
    <bind column="reimbursementExportTypeSelect" to="reimbursementExportTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('ireimbursement.batch.export.type.select', reimbursementExportTypeSelect, false)"
      check-message="Invalid reimbursementExportTypeSelect :reimbursementExportTypeSelect"/>
    <bind column="debtRecoveryTypeSelect" to="debtRecoveryTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('idebt.recovery.batch.type.select', debtRecoveryTypeSelect, false)"
      check-message="Invalid debtRecoveryTypeSelect :debtRecoveryTypeSelect"/>
    <bind column="moveLineExportTypeSelect" to="moveLineExportTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('accounting.report.type.select.export', moveLineExportTypeSelect, false)"
      check-message="Invalid moveLineExportTypeSelect :moveLineExportTypeSelect"/>
    <bind column="creditTransferTypeSelect" to="creditTransferTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('iaccount.account.batch.transfer.type.select', creditTransferTypeSelect, false)"
      check-message="Invalid creditTransferTypeSelect :creditTransferTypeSelect"/>
    <bind column="billOfExchangeTypeSelect" to="billOfExchangeTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('iaccount.account.batch.bill.of.exchange.type.select', billOfExchangeTypeSelect, false)"
      check-message="Invalid billOfExchangeTypeSelect :billOfExchangeTypeSelect"/>
    <bind column="accountingCutOffTypeSelect" to="accountingCutOffTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('accounting.batch.accounting.cut.off.type.select', accountingCutOffTypeSelect, false)"
      check-message="Invalid accountingCutOffTypeSelect :accountingCutOffTypeSelect"/>
    <bind column="generatedMoveStatusSelect" to="generatedMoveStatusSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('iaccount.move.status.select', generatedMoveStatusSelect, false)"
      check-message="Invalid generatedMoveStatusSelect :generatedMoveStatusSelect"/>
    <bind column="orderBySelect" to="orderBySelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('iaccount.account.batch.auto.move.lettering.order.by.select', orderBySelect, false)"
      check-message="Invalid orderBySelect :orderBySelect"/>
    <bind column="reconcileMethodSelect" to="reconcileMethodSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('iaccount.account.batch.auto.move.lettering.reconcile.method.select', reconcileMethodSelect, false)"
      check-message="Invalid reconcileMethodSelect :reconcileMethodSelect"/>
    <bind column="directDebitDataTypeSelect" to="directDebitDataTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('iaccount.account.batch.direct.debit.data.type.select', directDebitDataTypeSelect, false)"
      check-message="Invalid directDebitDataTypeSelect :directDebitDataTypeSelect"/>
    <bind column="billOfExchangeStepBatchSelect" to="billOfExchangeStepBatchSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('bankpayment.account.batch.bill.of.exchange.step.batch.select', billOfExchangeStepBatchSelect, false)"
      check-message="Invalid billOfExchangeStepBatchSelect :billOfExchangeStepBatchSelect"/>
    <bind column="billOfExchangeDataTypeSelect" to="billOfExchangeDataTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('bankpayment.account.batch.bill.of.exchange.data.type.select', billOfExchangeDataTypeSelect, false)"
      check-message="Invalid billOfExchangeDataTypeSelect :billOfExchangeDataTypeSelect"/>
    <bind to="dueDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(dueDate)"
      column="dueDate"/>
    <bind to="startDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(startDate)"
      column="startDate"/>
    <bind to="endDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(endDate)"
      column="endDate"/>
  </input>

  <input file="base_sequence.csv" separator=";" type="com.axelor.apps.base.db.Sequence"
    search="self.importId = :importId" call="com.axelor.csv.script.ImportSequence:importSequence">
    <bind column="codeSelect" to="codeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('sequence.generic.code.select', codeSelect, true)"
      check-message="Invalid codeSelect :codeSelect"/>
    <bind column="name" to="name"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="sequenceTypeSelect" to="sequenceTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(sequenceTypeSelect)"
      check-message="Sequence type must not be null"/>
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Sequence', 'importId', importId, 'company.importId, codeSelect, prefixe, suffixe', company_importId, codeSelect, prefixe, suffixe)"
      check-message="Company, code, prefixe and suffixe must be unique"/>
    <bind to="yearlyResetOk" column="yearlyResetOk" eval="yearlyResetOk == '1' ? true : false"
      if="yearlyResetOk"/>
    <bind to="nextNum" column="nextNum" eval="nextNum?.empty ? '1' : nextNum"/>
    <bind to="padding" column="padding" eval="padding?.empty ? '1' : padding"/>
    <bind to="toBeAdded" column="toBeAdded" eval="toBeAdded?.empty ? '1' : toBeAdded"/>
  </input>

  <input file="bankpayment_bankStatementRule.csv" separator=";"
    type="com.axelor.apps.bankpayment.db.BankStatementRule" search="self.importId = :importId">
    <bind column="accountManagement_importId" to="accountManagement"
      search="self.importId = :accountManagement_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.apps.account.db.AccountManagement', 'importId', accountManagement_importId)"
      check-message="Account management with importId :accountManagement_importId doesn't exist"/>
    <bind column="ruleTypeSelect" to="ruleTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('bank.payment.bank.statement.rule.rule.type.select', ruleTypeSelect, true)"
      check-message="Invalid ruleTypeSelect :ruleTypeSelect"/>
    <bind column="partnerFetchMethodSelect" to="partnerFetchMethodSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('bank.payment.bank.statement.rule.partner.fetch.method.select', partnerFetchMethodSelect, false)"
      check-message="Invalid partnerFetchMethodSelect :partnerFetchMethodSelect"/>
  </input>

  <input file="bankpayment_bankStatement.csv" separator=";"
    type="com.axelor.apps.bankpayment.db.BankStatement" search="self.importId = :importId"
    call="com.axelor.csv.script.ImportBankStatement:importBankStatement">
    <bind column="statusSelect" to="statusSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('bankpayment.bank.statement.status.select', statusSelect, false)"
      check-message="Invalid statusSelect :statusSelect"/>
    <bind to="bankStatementFileFormat" column="bankStatementFileFormat_importId"
      search="self.importId = :bankStatementFileFormat_importId"/>
    <bind to="fromDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(fromDate)"
      column="fromDate"/>
    <bind to="toDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(toDate)"
      column="toDate"/>
  </input>

  <input file="account_accountingReportType.csv" separator=";"
    search="self.importId = :importId" type="com.axelor.apps.account.db.AccountingReportType"
    update="true">
    <bind to="name" column="name"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind to="reportExportTypeSelect" column="reportExportTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('accounting.report.type.report.export.type.select', reportExportTypeSelect, true)"
      check-message="Invalid reportExportTypeSelect :reportExportTypeSelect"/>
    <bind to="typeSelect" column="typeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('accounting.report.type.select', typeSelect, true)"
      check-message="Invalid typeSelect :typeSelect"/>
    <bind to="comparison" column="comparison"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('accounting.report.type.comparison.select', comparison, false)"
      check-message="Invalid comparison :comparison"/>
  </input>

</csv-inputs>