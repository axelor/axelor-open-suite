<?xml version="1.0" encoding="UTF-8"?>
<csv-inputs xmlns="http://axelor.com/xml/ns/data-import"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://axelor.com/xml/ns/data-import http://axelor.com/xml/ns/data-import/data-import_6.1.xsd">

  <input file="bankpayment_bankOrderEconomicReason.csv" separator=";"
    type="com.axelor.apps.bankpayment.db.BankOrderEconomicReason">
    <bind to="name" eval="label != null &amp;&amp; label != '' ? code + ' - ' + label : code"/>
  </input>

  <input file="bankpayment_bankPaymentConfig.csv" separator=";"
    type="com.axelor.apps.bankpayment.db.BankPaymentConfig" search="self.importId = :importId"/>

  <input file="account_accountingBatch.csv" separator=";"
    type="com.axelor.apps.account.db.AccountingBatch" search="self.code = :code">
    <bind to="dueDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(dueDate)"
      column="dueDate"/>
    <bind to="startDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(startDate)"
      column="startDate"/>
    <bind to="endDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(endDate)"
      column="endDate"/>
  </input>

  <input file="base_sequence.csv" separator=";" type="com.axelor.apps.base.db.Sequence"
    search="self.importId = :importId" call="com.axelor.csv.script.ImportSequence:importSequence">
    <bind to="yearlyResetOk" column="yearlyResetOk" eval="yearlyResetOk == '1' ? true : false"
      if="yearlyResetOk"/>
    <bind to="nextNum" column="nextNum" eval="nextNum?.empty ? '1' : nextNum"/>
    <bind to="padding" column="padding" eval="padding?.empty ? '1' : padding"/>
    <bind to="toBeAdded" column="toBeAdded" eval="toBeAdded?.empty ? '1' : toBeAdded"/>
  </input>

  <input file="bankpayment_bankStatementRule.csv" separator=";"
    type="com.axelor.apps.bankpayment.db.BankStatementRule" search="self.importId = :importId"/>

  <input file="bankpayment_bankStatement.csv" separator=";"
    type="com.axelor.apps.bankpayment.db.BankStatement" search="self.importId = :importId"
    call="com.axelor.csv.script.ImportBankStatement:importBankStatement">
    <bind to="bankStatementFileFormat" column="bankStatementFileFormat_importId"
      search="self.importId = :bankStatementFileFormat_importId"/>
    <bind to="fromDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(fromDate)"
      column="fromDate"/>
    <bind to="toDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(toDate)"
      column="toDate"/>
  </input>

  <input file="bankpayment_bankStatementLineAFB120.csv" separator=";"
    type="com.axelor.apps.bankpayment.db.BankStatementLineAFB120" search="self.importId = :importId">
    <bind to="operationDate"
      eval="call:com.axelor.csv.script.ImportDateTime:importDate(operationDate)"
      column="operationDate"/>
    <bind to="valueDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(valueDate)"
      column="valueDate"/>
    <bind to="bankStatement" column="bankStatement_importId"
      search="self.importId = :bankStatement_importId"/>
    <bind to="bankDetails" column="bankDetails_importId"
      search="self.importId = :bankDetails_importId"/>
    <bind to="operationInterbankCodeLine" column="operationInterbankCodeLine_importId"
      search="self.importId = :operationInterbankCodeLine_importId"
      if="operationInterbankCodeLine_importId"/>
    <bind to="currency" column="currency_code" search="self.code = :currency_code"/>
  </input>

  <input file="base_template_context.csv" separator=";"
    type="com.axelor.message.db.TemplateContext" search="self.name = :name"/>

  <input file="base_template.csv" separator=";" type="com.axelor.message.db.Template"
    search="self.name = :name">
    <bind to="language" search="self.code = :languageCode"/>
    <bind to="templateContextList" search="self.name = :templateContext"
      if="templateContext != null &amp;&amp; !templateContext.empty"/>
    <bind column="birtTemplateSet_importId" to="birtTemplateSet"
      search="self.importId in :birtTemplateSet_importId"
      eval="birtTemplateSet_importId.split('\\|') as List" update="true"/>
  </input>

  <input file="bankpayment_interBankCodeReject.csv" separator=";"
    type="com.axelor.apps.bankpayment.db.InterbankCodeLine">
    <bind column="code_rejet" to="code"/>
    <bind column="libelle_rejet" to="name"/>
    <bind column="description_rejet" to="description"/>
    <bind column="transferCfonbOk" to="transferCfonbOk"
      eval="transferCfonbOk == 't' ? true : false"/>
    <bind column="prelevement" to="directDebitAndTipCfonbOk"
      eval="prelevement == 't' ? true : false"/>
    <bind column="prelevement_sepa" to="directDebitSepaOk"
      eval="prelevement_sepa == 't' ? true : false"/>
    <bind column="lcr_bor" to="lcrBorOk" eval="lcr_bor == 't' ? true : false"/>
    <bind column="cheque" to="chequeOk" eval="cheque == 't' ? true : false"/>
    <bind column="rejet_technique" to="technicalRejectOk"
      eval="rejet_technique == 't' ? true : false"/>
    <bind to="interbankCode" search="self.code = :code_fichier">
      <bind column="code_fichier" to="code"/>
      <bind column="nom_fichier" to="name"/>
      <bind column="date_fin" to="endDate" eval="date_fin ? date_fin : null"/>
      <bind column="description_fichier" to="description"/>
      <bind to="typeSelect" eval="2"/>
    </bind>
  </input>

  <input file="bankpayment_interBankCodeOperation.csv" separator=";"
    type="com.axelor.apps.bankpayment.db.InterbankCodeLine">
    <bind column="code_operation" to="code"/>
    <bind column="libelle_operation" to="name"/>
    <bind column="description_operation" to="description"/>
    <bind column="transferCfonbOk" to="transferCfonbOk"
      eval="transferCfonbOk == 't' ? true : false"/>
    <bind column="prelevement" to="directDebitAndTipCfonbOk"
      eval="prelevement == 't' ? true : false"/>
    <bind column="prelevement_sepa" to="directDebitSepaOk"
      eval="prelevement_sepa == 't' ? true : false"/>
    <bind column="lcr_bor" to="lcrBorOk" eval="lcr_bor == 't' ? true : false"/>
    <bind column="cheque" to="chequeOk" eval="cheque == 't' ? true : false"/>
    <bind column="operation_technique" to="technicalRejectOk"
      eval="rejet_technique == 't' ? true : false"/>
    <bind to="interbankCode" search="self.code = :code_fichier">
      <bind column="code_fichier" to="code"/>
      <bind column="nom_fichier" to="name"/>
      <bind column="date_fin" to="endDate" eval="date_fin ? date_fin : null"/>
      <bind column="description_fichier" to="description"/>
      <bind to="typeSelect" eval="1"/>
    </bind>
  </input>

  <input file="account_accountManagement.csv" separator=";"
    type="com.axelor.apps.account.db.AccountManagement" search="self.importId = :importId"
    update="true"/>

  <input file="studio_appAccount.csv" separator=";" search="self.app.code = :code"
    update="true" type="com.axelor.studio.db.AppAccount"/>
</csv-inputs>