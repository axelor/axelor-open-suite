<?xml version="1.0" encoding="UTF-8"?>
<csv-inputs xmlns="http://axelor.com/xml/ns/data-import"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://axelor.com/xml/ns/data-import http://axelor.com/xml/ns/data-import/data-import_7.4.xsd">

  <input file="hr_expense.csv" separator=";" type="com.axelor.apps.hr.db.Expense"
    search="self.importId = :importId">
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Company', 'importId', company_importId)"
      check-message="Company with importId :company_importId doesn't exist"/>
    <bind column="employee_importId" to="employee" search="self.importId = :employee_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.apps.hr.db.Employee', 'importId', employee_importId)"
      check-message="Employee with importId :employee_importId doesn't exist"/>
    <bind column="typeSelect" to="typeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('hr.expense.type.select', typeSelect, false)"
      check-message="Invalid typeSelect :typeSelect"/>
    <bind column="statusSelect" to="statusSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('hrs.expenses.status.select', statusSelect, false)"
      check-message="Invalid statusSelect :statusSelect"/>
    <bind column="companyCbSelect" to="companyCbSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('hr.expense.company.cb.payment', companyCbSelect, false)"
      check-message="Invalid companyCbSelect :companyCbSelect"/>
    <bind column="paymentStatusSelect" to="paymentStatusSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('invoice.payment.status.select', paymentStatusSelect, false)"
      check-message="Invalid paymentStatusSelect :paymentStatusSelect"/>
    <bind column="expenseSeq" to="expenseSeq"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.hr.db.Expense', 'importId', importId, 'expenseSeq, company.importId', expenseSeq, company_importId)"
      check-message="Expense NÂ° and company must be unique"/>
  </input>

  <input file="hr_expenseLine.csv" separator=";" type="com.axelor.apps.hr.db.ExpenseLine"
    search="self.importId = :importId">
    <bind column="expenseProduct_importId" to="expenseProduct"
      search="self.importId = :expenseProduct_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Product', 'importId', expenseProduct_importId)"
      check-message="Expense type with importId :expenseProduct_importId doesn't exist"/>
    <bind column="totalAmount" to="totalAmount"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(totalAmount)"
      check-message="Total amount with tax must not be null"/>
    <bind column="kilometricTypeSelect" to="kilometricTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('hr.kilometric.allowance.type.select', kilometricTypeSelect, false)"
      check-message="Invalid kilometricTypeSelect :kilometricTypeSelect"/>
    <bind to="expense" column="expense_importId" search="self.importId = :expense_importId"/>
    <bind to="generalExpense" column="generalExpense_importId"
      search="self.importId = :expense_importId"/>
    <bind to="expenseDate"
      eval="call:com.axelor.csv.script.ImportDateTime:importDate(expenseDate)" column="expenseDate"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(expenseDate)"
      check-message="Expense date must not be null"/>
  </input>

  <input file="hr_employeeBonusType.csv" separator=";"
    type="com.axelor.apps.hr.db.EmployeeBonusType"/>

  <input file="base_sequence.csv" separator=";" type="com.axelor.apps.base.db.Sequence"
    search="self.importId = :importId" call="com.axelor.csv.script.ImportSequence:importSequence">
    <bind column="codeSelect" to="codeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('sequence.generic.code.select', codeSelect, true)"
      check-message="Invalid codeSelect :codeSelect"/>
    <bind column="name" to="name"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="sequenceTypeSelect" to="sequenceTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(sequenceTypeSelect)"
      check-message="Sequence type must not be null"/>
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Sequence', 'importId', importId, 'company.importId, codeSelect, prefixe, suffixe', company_importId, codeSelect, prefixe, suffixe)"
      check-message="Company, code, prefixe and suffixe must be unique"/>
    <bind to="yearlyResetOk" column="yearlyResetOk" eval="yearlyResetOk == '1' ? true : false"
      if="yearlyResetOk"/>
    <bind to="nextNum" column="nextNum" eval="nextNum?.empty ? '1' : nextNum"/>
    <bind to="padding" column="padding" eval="padding?.empty ? '1' : padding"/>
    <bind to="toBeAdded" column="toBeAdded" eval="toBeAdded?.empty ? '1' : toBeAdded"/>
  </input>

  <input file="base_expenseTemplate.csv" separator=";" type="com.axelor.message.db.Template"
    search="self.importId = :importId">
    <bind column="name" to="name"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="mediaTypeSelect" to="mediaTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('message.media.type.select', mediaTypeSelect, true)"
      check-message="Invalid mediaTypeSelect :mediaTypeSelect"/>
    <bind column="templateEngineSelect" to="templateEngineSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('template.engine.select', templateEngineSelect, false)"
      check-message="Invalid templateEngineSelect :templateEngineSelect"/>
    <bind column="language" to="language"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('select.language', language, false)"
      check-message="Invalid language :language"/>
  </input>

  <input file="account_accountConfig.csv" separator=";"
    type="com.axelor.apps.account.db.AccountConfig" search="self.importId = :importId" update="true">
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Company', 'importId', company_importId)"
      check-message="Company with importId :company_importId doesn't exist"/>
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.account.db.AccountConfig', 'importId', importId, 'company.importId', company_importId)"
      check-message="Company must be unique"/>
    <bind column="accountCodeNbrCharSelect" to="accountCodeNbrCharSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('account.account.chart.code.nbr.char.select', accountCodeNbrCharSelect, false)"
      check-message="Invalid accountCodeNbrCharSelect :accountCodeNbrCharSelect"/>
    <bind column="partnerAccountGenerationModeSelect" to="partnerAccountGenerationModeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('account.create.mode.select', partnerAccountGenerationModeSelect, false)"
      check-message="Invalid partnerAccountGenerationModeSelect :partnerAccountGenerationModeSelect"/>
    <bind column="invoiceInAtiSelect" to="invoiceInAtiSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('base.in.ati.select', invoiceInAtiSelect, false)"
      check-message="Invalid invoiceInAtiSelect :invoiceInAtiSelect"/>
    <bind column="nbrOfAnalyticAxisSelect" to="nbrOfAnalyticAxisSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('account.general.analytic.axis.type.select', nbrOfAnalyticAxisSelect, false)"
      check-message="Invalid nbrOfAnalyticAxisSelect :nbrOfAnalyticAxisSelect"/>
    <bind column="analyticDistributionTypeSelect" to="analyticDistributionTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('account.general.analytic.distribution.type.select', analyticDistributionTypeSelect, false)"
      check-message="Invalid analyticDistributionTypeSelect :analyticDistributionTypeSelect"/>
  </input>

  <input file="hr_hrConfig.csv" type="com.axelor.apps.hr.db.HRConfig" separator=";"
    search="self.importId = :importId" update="true">
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Company', 'importId', company_importId)"
      check-message="Company with importId :company_importId doesn't exist"/>
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.hr.db.HRConfig', 'importId', importId, 'company.importId', company_importId)"
      check-message="Company must be unique"/>
    <bind column="lunchVoucherFormatSelect" to="lunchVoucherFormatSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('hr.lunch.voucher.mgt.line.lunch.voucher.format.select', lunchVoucherFormatSelect, false)"
      check-message="Invalid lunchVoucherFormatSelect :lunchVoucherFormatSelect"/>
  </input>

</csv-inputs>

