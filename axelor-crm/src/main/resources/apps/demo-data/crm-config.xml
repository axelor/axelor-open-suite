<?xml version="1.0" encoding="UTF-8"?>
<csv-inputs xmlns="http://axelor.com/xml/ns/data-import"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://axelor.com/xml/ns/data-import http://axelor.com/xml/ns/data-import/data-import_7.4.xsd">

  <input file="crm_crmBatch.csv" separator=";" type="com.axelor.apps.crm.db.CrmBatch"
    search="self.code = :code">
    <bind column="actionSelect" to="actionSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.crm.db.CrmBatch', 'actionSelect', actionSelect)"
      check-message="Invalid actionSelect"/>
    <bind column="durationTypeSelect" to="durationTypeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.crm.db.CrmBatch', 'durationTypeSelect', durationTypeSelect)"
      check-message="Invalid durationTypeSelect"/>
  </input>

  <input file="base_sequence.csv" separator=";" type="com.axelor.apps.base.db.Sequence"
    search="self.importId = :importId" call="com.axelor.csv.script.ImportSequence:importSequence">
    <bind column="codeSelect" to="codeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.Sequence', 'codeSelect', codeSelect)"
      check-message="Invalid codeSelect"/>
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="sequenceTypeSelect" to="sequenceTypeSelect"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(sequenceTypeSelect)"
      check-message="Sequence type must not be null"/>
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Sequence','importId', importId, 'company.importId, codeSelect, prefixe, suffixe', company_importId, codeSelect, prefixe, suffixe)"
      check-message="Company, code, prefixe and suffixe must be unique"/>
    <bind to="yearlyResetOk" column="yearlyResetOk" eval="yearlyResetOk == '1' ? true : false"
      if="yearlyResetOk"/>
    <bind to="yearlyResetOk" column="yearlyResetOk" eval="yearlyResetOk == '1' ? true : false"
      if="yearlyResetOk"/>
    <bind to="nextNum" column="nextNum" eval="nextNum?.empty ? '1' : nextNum"/>
    <bind to="padding" column="padding" eval="padding?.empty ? '1' : padding"/>
    <bind to="toBeAdded" column="toBeAdded" eval="toBeAdded?.empty ? '1' : toBeAdded"/>
    <bind to="resetDate"
      eval="call:com.axelor.apps.base.service.app.AppBaseService:getTodayDate(null)"/>
  </input>

  <input file="crm_lead.csv" separator=";" type="com.axelor.apps.crm.db.Lead"
    search="self.importId = :importId" call="com.axelor.csv.script.ImportLead:saveLead">
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="titleSelect" to="titleSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.crm.db.Lead', 'titleSelect', titleSelect)"
      check-message="Invalid titleSelect"/>
    <bind column="sizeSelect" to="sizeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.crm.db.Lead', 'sizeSelect', sizeSelect)"
      check-message="Invalid sizeSelect"/>
    <bind column="description" to="description"/>
    <bind to="jobTitleFunction" search="self.name = :jobTitle">
      <bind to="name" column="jobTitle"/>
    </bind>
    <bind to="emailAddress" search="self.address = :email"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.apps.crm.db.Lead', 'importId', importId, 'emailAddress.address', email)"
      check-message="Email address must be unique">
      <bind to="address" column="email"/>
    </bind>
    <bind to="contactDate"
      eval="call:com.axelor.csv.script.ImportDateTime:importDate(contactDate)" column="contactDate"/>
    <bind to="createdOn"
      eval="call:com.axelor.csv.script.ImportDateTime:importDate(contactDate)" column="contactDate"/>
    <bind to="user" search="self.importId = :userImportId" update="true"/>
    <bind to="createdBy"
      eval="call:com.axelor.csv.script.ImportLead:importCreatedBy(userImportId)"/>
  </input>

  <input file="crm_eventCategory.csv" separator=";"
    type="com.axelor.apps.crm.db.EventCategory" search="self.importId = :importId">
    <bind column="code" to="code"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(code)"
      check-message="Code must not be null"/>
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="typeSelect" to="typeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.crm.db.EventCategory', 'typeSelect', typeSelect)"
      check-message="Invalid typeSelect"/>
  </input>

  <input file="crm_event.csv" separator=";" type="com.axelor.apps.crm.db.Event"
    search="self.importId = :importId">
    <bind column="relatedToSelect" to="relatedToSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.crm.db.Event', 'relatedToSelect', relatedToSelect)"
      check-message="Invalid relatedToSelect"/>
    <bind column="statusSelect" to="statusSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.crm.db.Event', 'statusSelect', statusSelect)"
      check-message="Invalid statusSelect"/>
    <bind column="callTypeSelect" to="callTypeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.crm.db.Event', 'callTypeSelect', callTypeSelect)"
      check-message="Invalid callTypeSelect"/>
    <bind column="prioritySelect" to="prioritySelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.crm.db.Event', 'prioritySelect', prioritySelect)"
      check-message="Invalid prioritySelect"/>
    <bind to="startDateTime"
      eval="call:com.axelor.csv.script.ImportDateTime:importDateTime(startDateTimeNow)"
      column="startDateTimeNow"/>
    <bind to="endDateTime"
      eval="call:com.axelor.csv.script.ImportDateTime:importDateTime(endDateTimeNow)"
      column="endDateTimeNow"/>
  </input>

  <input file="crm_event.csv" separator=";" type="com.axelor.apps.crm.db.Event"
    search="self.importId = :importId">
    <bind column="relatedToSelect" to="relatedToSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.crm.db.Event', 'relatedToSelect', relatedToSelect)"
      check-message="Invalid relatedToSelect"/>
    <bind column="statusSelect" to="statusSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.crm.db.Event', 'statusSelect', statusSelect)"
      check-message="Invalid statusSelect"/>
    <bind column="callTypeSelect" to="callTypeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.crm.db.Event', 'callTypeSelect', callTypeSelect)"
      check-message="Invalid callTypeSelect"/>
    <bind column="prioritySelect" to="prioritySelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.crm.db.Event', 'prioritySelect', prioritySelect)"
      check-message="Invalid prioritySelect"/>
    <bind column="subject" to="subjectTeam"/>
  </input>

  <input file="crm_opportunityType.csv" separator=";"
    type="com.axelor.apps.crm.db.OpportunityType" search="self.code = :code">
    <bind column="code" to="code"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(code)"
      check-message="Code must not be null"/>
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
  </input>

  <input file="crm_opportunity.csv" separator=";" type="com.axelor.apps.crm.db.Opportunity"
    search="self.importId = :importId"
    call="com.axelor.csv.script.ImportOpportunity:importOpportunity">
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="opportunitySeq" to="opportunitySeq"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.apps.crm.db.Opportunity','importId', importId, 'opportunitySeq', opportunitySeq)"
      check-message="Reference must be unique"/>
    <bind to="expectedCloseDate"
      eval="call:com.axelor.csv.script.ImportDateTime:importDate(expectedCloseDate)"
      column="expectedCloseDate"/>
    <bind to="user" search="self.importId = :userImportId" update="true"/>
    <bind to="createdBy"
      eval="call:com.axelor.csv.script.ImportLead:importCreatedBy(userImportId)"/>
  </input>

  <input file="crm_crmConfig.csv" separator=";" type="com.axelor.apps.crm.db.CrmConfig"
    search="self.importId = :importId">
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.utils.helpers.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Company', 'importId', company_importId)"
      check-message="Company doesn't exist"/>
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.apps.crm.db.CrmConfig', 'importId', importId, 'company.importId', company_importId)"
      check-message="Company must be unique"/>
  </input>

  <input file="crm_anonymizer.csv" type="com.axelor.apps.base.db.Anonymizer" separator=";">
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
  </input>

  <input file="crm_anonymizerLine.csv" type="com.axelor.apps.base.db.AnonymizerLine"
    separator=";">
    <bind to="metaModel" column="metaModel" search="self.name = :metaModel"
      check="com.axelor.utils.helpers.ImportHelper.isRecordPresent('com.axelor.meta.db.MetaModel', 'name', metaModel)"
      check-message="Meta model doesn't exist"/>
    <bind to="metaField" column="metaField"
      search="self.name = :metaField AND self.metaModel.name = :metaModel"
      check="com.axelor.utils.helpers.ImportHelper.isRecordPresent('com.axelor.meta.db.MetaField', 'name, metaModel.name', metaField, metaModel)"
      check-message="Meta field doesn't exist"/>
    <bind to="anonymizer" column="anonymizer_importId"
      search="self.importId = :anonymizer_importId"/>
    <bind to="useFakeData" column="useFakeData"/>
  </input>

  <input file="base_template.csv" separator=";" type="com.axelor.message.db.Template"
    search="self.name = :name">
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="mediaTypeSelect" to="mediaTypeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.message.db.Template', 'mediaTypeSelect', mediaTypeSelect)"
      check-message="Invalid mediaTypeSelect"/>
    <bind column="templateEngineSelect" to="templateEngineSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.message.db.Template', 'templateEngineSelect', templateEngineSelect)"
      check-message="Invalid templateEngineSelect"/>
    <bind column="language" to="language"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.message.db.Template', 'language', language)"
      check-message="Invalid language"/>
  </input>

  <input file="base_researchPrimaryKey.csv" separator=";"
    type="com.axelor.apps.base.db.ResearchPrimaryKey" search="self.importId = :importId">
    <bind column="code" to="code"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.ResearchPrimaryKey', 'importId', importId, 'code', code)"
      check-message="Code must be unique"/>
    <bind column="typeSelect" to="typeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.ResearchPrimaryKey', 'typeSelect', typeSelect)"
      check-message="Invalid typeSelect"/>
  </input>

  <input file="base_researchParameterConfig.csv" separator=";"
    type="com.axelor.apps.base.db.ResearchParameterConfig" search="self.importId = :importId">
    <bind column="model" to="model"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.ResearchParameterConfig', 'importId', importId, 'model', model)"
      check-message="Model must be unique"/>
    <bind column="model" to="model"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.ResearchParameterConfig', 'model', model)"
      check-message="Invalid model"/>
    <bind to="metaModel" column="metaModel" search="self.fullName = :metaModel"/>
  </input>

  <input file="base_researchParameter.csv" separator=";"
    type="com.axelor.apps.base.db.ResearchParameter" search="self.importId = :importId">
    <bind to="researchParameterConfig" column="researchParameterConfig_importId"
      search="self.importId = :researchParameterConfig_importId"
      check="com.axelor.utils.helpers.ImportHelper.isRecordPresent('com.axelor.apps.base.db.ResearchParameterConfig', 'importId', researchParameterConfig_importId)"
      check-message="Search configuration doesn't exist"/>
    <bind to="researchPrimaryKey" column="researchPrimaryKey_importId"
      search="self.importId = :researchPrimaryKey_importId"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.ResearchParameter', 'importId', importId, 'researchPrimaryKey.importId, researchParameterConfig.importId', researchPrimaryKey_importId, researchParameterConfig_importId)"
      check-message="Primary key and search configuration must be unique"/>
    <bind to="mapping" search="self.metaModel.fullName = :metaModel AND self.name = :metaField"
      column="metaField"/>
  </input>

  <input file="base_researchRequest.csv" separator=";"
    type="com.axelor.apps.base.db.ResearchRequest" search="self.importId = :importId">
    <bind column="models" to="models"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.ResearchRequest', 'models', models)"
      check-message="Invalid models"/>
    <bind to="research1" column="research1_importId"
      search="self.importId = :research1_importId"/>
    <bind to="dateResearch1" column="dateResearch1_importId"
      search="self.importId = :dateResearch1_importId" if="dateResearch1_importId"/>
    <bind to="dateResearch1Value" column="dateResearch1Value"
      eval="call:com.axelor.csv.script.ImportDateTime:importDate(dateResearch1Value)"/>
  </input>

</csv-inputs>