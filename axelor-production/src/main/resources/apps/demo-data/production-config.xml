<?xml version="1.0" encoding="UTF-8"?>
<csv-inputs xmlns="http://axelor.com/xml/ns/data-import"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://axelor.com/xml/ns/data-import http://axelor.com/xml/ns/data-import/data-import_7.4.xsd">

  <input file="base_sequence.csv" separator=";" type="com.axelor.apps.base.db.Sequence"
    search="self.importId = :importId" call="com.axelor.csv.script.ImportSequence:importSequence">
    <bind column="codeSelect" to="codeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.base.db.Sequence', 'codeSelect', codeSelect)"
      check-message="Invalid codeSelect :codeSelect"/>
    <bind column="name" to="name"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="sequenceTypeSelect" to="sequenceTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(sequenceTypeSelect)"
      check-message="Sequence type must not be null"/>
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Sequence', 'importId', importId, 'company.importId, codeSelect, prefixe, suffixe', company_importId, codeSelect, prefixe, suffixe)"
      check-message="Company, code, prefixe and suffixe must be unique"/>
    <bind to="yearlyResetOk" column="yearlyResetOk" eval="yearlyResetOk == '1' ? true : false"
      if="yearlyResetOk"/>
    <bind to="nextNum" column="nextNum" eval="nextNum?.empty ? '1' : nextNum"/>
    <bind to="padding" column="padding" eval="padding?.empty ? '1' : padding"/>
    <bind to="toBeAdded" column="toBeAdded" eval="toBeAdded?.empty ? '1' : toBeAdded"/>
  </input>

  <input file="production_machineType.csv" separator=";"
    type="com.axelor.apps.production.db.MachineType">
    <bind column="name" to="name"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
  </input>

  <input file="production_machine.csv" separator=";"
    type="com.axelor.apps.production.db.Machine">
    <bind column="name" to="name"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
  </input>

  <input file="production_workCenter.csv" separator=";"
    type="com.axelor.apps.production.db.WorkCenter">
    <bind column="name" to="name"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="workCenterTypeSelect" to="workCenterTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.production.db.WorkCenter', 'workCenterTypeSelect', workCenterTypeSelect)"
      check-message="Invalid workCenterTypeSelect :workCenterTypeSelect"/>
    <bind column="costTypeSelect" to="costTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.production.db.WorkCenter', 'costTypeSelect', costTypeSelect)"
      check-message="Invalid costTypeSelect :costTypeSelect"/>
    <bind column="hrCostTypeSelect" to="hrCostTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.production.db.WorkCenter', 'hrCostTypeSelect', hrCostTypeSelect)"
      check-message="Invalid hrCostTypeSelect :hrCostTypeSelect"/>
  </input>

  <input file="production_prodProcess.csv" separator=";"
    type="com.axelor.apps.production.db.ProdProcess">
    <bind column="name" to="name"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Company', 'importId', company_importId)"
      check-message="Company with importId :company_importId doesn't exist"/>
    <bind column="statusSelect" to="statusSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.production.db.ProdProcess', 'statusSelect', statusSelect)"
      check-message="Invalid statusSelect :statusSelect"/>
    <bind column="stockMoveRealizeOrderSelect" to="stockMoveRealizeOrderSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.production.db.ProdProcess', 'stockMoveRealizeOrderSelect', stockMoveRealizeOrderSelect)"
      check-message="Invalid stockMoveRealizeOrderSelect :stockMoveRealizeOrderSelect"/>
    <bind to="fullName" column="name"/>
  </input>

  <input file="production_prodProcessLine.csv" separator=";"
    type="com.axelor.apps.production.db.ProdProcessLine">
    <bind column="workCenterTypeSelect" to="workCenterTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.production.db.ProdProcessLine', 'workCenterTypeSelect', workCenterTypeSelect)"
      check-message="Invalid workCenterTypeSelect :workCenterTypeSelect"/>
    <bind column="costTypeSelect" to="costTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.production.db.ProdProcessLine', 'costTypeSelect', costTypeSelect)"
      check-message="Invalid costTypeSelect :costTypeSelect"/>
    <bind column="hrCostTypeSelect" to="hrCostTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.production.db.ProdProcessLine', 'hrCostTypeSelect', hrCostTypeSelect)"
      check-message="Invalid hrCostTypeSelect :hrCostTypeSelect"/>
  </input>

  <input file="production_billOfMaterial.csv" separator=";"
    type="com.axelor.apps.production.db.BillOfMaterial" search="self.importId = :importId"
    call="com.axelor.csv.script.ImportBillOfMaterial:importBillOfMaterial">
    <bind column="product_importId" to="product" search="self.importId = :product_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Product', 'importId', product_importId)"
      check-message="Product with importId :product_importId doesn't exist"/>
    <bind column="statusSelect" to="statusSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.production.db.BillOfMaterial', 'statusSelect', statusSelect)"
      check-message="Invalid statusSelect :statusSelect"/>
  </input>

  <input file="production_billOfMaterialLine.csv" separator=";"
    type="com.axelor.apps.production.db.BillOfMaterialLine" search="self.importId = :importId">
    <bind column="product_importId" to="product" search="self.importId = :product_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Product', 'importId', product_importId)"
      check-message="Product with importId :product_importId doesn't exist"/>
  </input>

  <input file="production_productionConfig.csv" separator=";"
    type="com.axelor.apps.production.db.ProductionConfig" search="self.importId = :importId">
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Company', 'importId', company_importId)"
      check-message="Company with importId :company_importId doesn't exist"/>
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.production.db.ProductionConfig', 'importId', importId, 'company.importId', company_importId)"
      check-message="Company must be unique"/>
    <bind column="stockMoveRealizeOrderSelect" to="stockMoveRealizeOrderSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.production.db.ProductionConfig', 'stockMoveRealizeOrderSelect', stockMoveRealizeOrderSelect)"
      check-message="Invalid stockMoveRealizeOrderSelect :stockMoveRealizeOrderSelect"/>
    <bind column="capacity" to="capacity"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.production.db.ProductionConfig', 'capacity', capacity)"
      check-message="Invalid capacity :capacity"/>
    <bind column="scheduling" to="scheduling"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.production.db.ProductionConfig', 'scheduling', scheduling)"
      check-message="Invalid scheduling :scheduling"/>
  </input>

  <input file="stock_stockConfig.csv" separator=";"
    type="com.axelor.apps.stock.db.StockConfig" search="self.importId = :importId">
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Company', 'importId', company_importId)"
      check-message="Company with importId :company_importId doesn't exist"/>
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.stock.db.StockConfig', 'importId', importId, 'company.importId', company_importId)"
      check-message="Company must be unique"/>
    <bind column="stockValuationTypeSelect" to="stockValuationTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.stock.db.StockConfig', 'stockValuationTypeSelect', stockValuationTypeSelect)"
      check-message="Invalid stockValuationTypeSelect :stockValuationTypeSelect"/>
    <bind column="inventoryValuationTypeSelect" to="inventoryValuationTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.stock.db.StockConfig', 'inventoryValuationTypeSelect', inventoryValuationTypeSelect)"
      check-message="Invalid inventoryValuationTypeSelect :inventoryValuationTypeSelect"/>
  </input>

  <input file="production_costSheetGroup.csv" separator=";"
    type="com.axelor.apps.production.db.CostSheetGroup" search="self.importId = :importId">
    <bind column="name" to="name"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="costTypeSelect" to="costTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.production.db.CostSheetGroup', 'costTypeSelect', costTypeSelect)"
      check-message="Invalid costTypeSelect :costTypeSelect"/>
    <bind column="rateTypeSelect" to="rateTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.production.db.CostSheetGroup', 'rateTypeSelect', rateTypeSelect)"
      check-message="Invalid rateTypeSelect :rateTypeSelect"/>
  </input>

  <!-- Update default BOM -->

  <input file="base_product.csv" separator=";" type="com.axelor.apps.base.db.Product"
    search="self.importId = :importId" update="true">
    <bind column="code" to="code"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Product', 'importId', importId, 'code', code)"
      check-message="Code must be unique"/>
    <bind column="serialNumber" to="serialNumber"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Product', 'importId', importId, 'serialNumber', serialNumber)"
      check-message="Serial number must be unique"/>
    <bind column="saleSupplySelect" to="saleSupplySelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.base.db.Product', 'saleSupplySelect', saleSupplySelect)"
      check-message="Invalid saleSupplySelect :saleSupplySelect"/>
    <bind column="productTypeSelect" to="productTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.base.db.Product', 'productTypeSelect', productTypeSelect)"
      check-message="Invalid productTypeSelect :productTypeSelect"/>
    <bind column="procurementMethodSelect" to="procurementMethodSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.base.db.Product', 'procurementMethodSelect', procurementMethodSelect)"
      check-message="Invalid procurementMethodSelect :procurementMethodSelect"/>
    <bind column="productSubTypeSelect" to="productSubTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.base.db.Product', 'productSubTypeSelect', productSubTypeSelect)"
      check-message="Invalid productSubTypeSelect :productSubTypeSelect"/>
    <bind column="inventoryTypeSelect" to="inventoryTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.base.db.Product', 'inventoryTypeSelect', inventoryTypeSelect)"
      check-message="Invalid inventoryTypeSelect :inventoryTypeSelect"/>
    <bind column="versionSelect" to="versionSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.base.db.Product', 'versionSelect', versionSelect)"
      check-message="Invalid versionSelect :versionSelect"/>
    <bind column="costTypeSelect" to="costTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.base.db.Product', 'costTypeSelect', costTypeSelect)"
      check-message="Invalid costTypeSelect :costTypeSelect"/>
    <bind column="realOrEstimatedPriceSelect" to="realOrEstimatedPriceSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.base.db.Product', 'realOrEstimatedPriceSelect', realOrEstimatedPriceSelect)"
      check-message="Invalid realOrEstimatedPriceSelect :realOrEstimatedPriceSelect"/>
    <bind column="manufOrderCompValuMethodSelect" to="manufOrderCompValuMethodSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.base.db.Product', 'manufOrderCompValuMethodSelect', manufOrderCompValuMethodSelect)"
      check-message="Invalid manufOrderCompValuMethodSelect :manufOrderCompValuMethodSelect"/>
    <bind column="bomCompValuMethodSelect" to="bomCompValuMethodSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.base.db.Product', 'bomCompValuMethodSelect', bomCompValuMethodSelect)"
      check-message="Invalid bomCompValuMethodSelect :bomCompValuMethodSelect"/>
    <bind to="startDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(startDate)"
      column="startDate"/>
    <bind to="createdOn" eval="call:com.axelor.csv.script.ImportDateTime:importDate(startDate)"
      column="startDate"/>
  </input>

  <input file="studio_appProduction.csv" separator=";"
    type="com.axelor.studio.db.AppProduction" search="self.app.code = :code" update="true">
    <bind column="mOFilterOnStockDetailStatusSelect" to="mOFilterOnStockDetailStatusSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.studio.db.AppProduction', 'mOFilterOnStockDetailStatusSelect', mOFilterOnStockDetailStatusSelect)"
      check-message="Invalid mOFilterOnStockDetailStatusSelect :mOFilterOnStockDetailStatusSelect"/>
    <bind column="operationContinuitySelect" to="operationContinuitySelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.studio.db.AppProduction', 'operationContinuitySelect', operationContinuitySelect)"
      check-message="Invalid operationContinuitySelect :operationContinuitySelect"/>
  </input>

  <input file="production_oneLine.csv" type="com.axelor.apps.sale.db.ConfiguratorCreator"
    call="com.axelor.csv.script.ImportConfiguratorCreator:importConfiguratorCreator">
    <bind column="name" to="name"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
  </input>

  <input file="production_mpsWeeklySchedule.csv" separator=";"
    type="com.axelor.apps.production.db.MpsWeeklySchedule" search="self.importId = :importId">
    <bind column="code" to="code"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.production.db.MpsWeeklySchedule', 'importId', importId, 'code', code)"
      check-message="Code must be unique"/>
  </input>

</csv-inputs>
