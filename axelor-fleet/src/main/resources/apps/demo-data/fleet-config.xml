<?xml version="1.0" encoding="UTF-8"?>
<csv-inputs xmlns="http://axelor.com/xml/ns/data-import"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://axelor.com/xml/ns/data-import http://axelor.com/xml/ns/data-import/data-import_7.4.xsd">

  <input file="fleet_vehicleContract.csv" separator=";"
    type="com.axelor.apps.fleet.db.VehicleContract" search="self.importId = :importId">
    <bind column="typeSelect" to="typeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.fleet.db.VehicleContract', 'typeSelect', typeSelect)"
      check-message="Invalid typeSelect"/>
    <bind column="statusSelect" to="statusSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.fleet.db.VehicleContract', 'statusSelect', statusSelect)"
      check-message="Invalid statusSelect"/>
    <bind column="costFrequencySelect" to="costFrequencySelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.fleet.db.VehicleContract', 'costFrequencySelect', costFrequencySelect)"
      check-message="Invalid costFrequencySelect"/>
    <bind column="invoiceDate" to="invoiceDate"
      eval="call: com.axelor.csv.script.ImportDateTime:importDate(invoiceDate)"/>
    <bind column="startDate" to="startDate"
      eval="call: com.axelor.csv.script.ImportDateTime:importDate(startDate)"/>
    <bind column="expiryDate" to="expiryDate"
      eval="call: com.axelor.csv.script.ImportDateTime:importDate(expiryDate)"/>
  </input>

  <input file="fleet_vehicleMake.csv" separator=";"
    type="com.axelor.apps.fleet.db.VehicleMake" search="self.importId = :importId">
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
  </input>

  <input file="fleet_vehicleModel.csv" separator=";"
    type="com.axelor.apps.fleet.db.VehicleModel" search="self.importId = :importId">
    <bind column="model" to="model"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(model)"
      check-message="Model must not be null"/>
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
  </input>

  <input file="fleet_vehicle.csv" separator=";" type="com.axelor.apps.fleet.db.Vehicle"
    search="self.importId = :importId" call="com.axelor.csv.script.ImportVehicle:importVehicle">
    <bind column="transmissionSelect" to="transmissionSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.fleet.db.Vehicle', 'transmissionSelect', transmissionSelect)"
      check-message="Invalid transmissionSelect"/>
    <bind column="fuelTypeSelect" to="fuelTypeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.fleet.db.Vehicle', 'fuelTypeSelect', fuelTypeSelect)"
      check-message="Invalid fuelTypeSelect"/>
    <bind column="acquisitionDate" to="acquisitionate"
      eval="call: com.axelor.csv.script.ImportDateTime:importDate(acquisitionDate)"/>
    <bind column="vehicleTagSetImportId" to="vehicleTagSet"
      search="self.importId in :vehicleTagSetImportId"
      eval="vehicleTagSetImportId.split('\\|') as List"/>
  </input>

  <input file="fleet_vehicleFuelLog.csv" separator=";"
    type="com.axelor.apps.fleet.db.VehicleFuelLog" search="self.importId = :importId">
    <bind column="date" to="date"
      eval="call: com.axelor.csv.script.ImportDateTime:importDate(date)"/>
  </input>

</csv-inputs>
