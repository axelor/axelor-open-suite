<?xml version="1.0" encoding="UTF-8"?>
<csv-inputs xmlns="http://axelor.com/xml/ns/data-import"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://axelor.com/xml/ns/data-import http://axelor.com/xml/ns/data-import/data-import_7.4.xsd">

  <input file="base_sequence.csv" separator=";" type="com.axelor.apps.base.db.Sequence"
    search="self.importId = :importId" call="com.axelor.csv.script.ImportSequence:importSequence">
    <bind column="codeSelect" to="codeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.base.db.Sequence', 'codeSelect', codeSelect)"
      check-message="Invalid codeSelect"/>
    <bind column="name" to="name"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="sequenceTypeSelect" to="sequenceTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(sequenceTypeSelect)"
      check-message="Sequence type must not be null"/>
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Company', 'importId', company_importId)"
      check-message="Company doesn't exist"/>
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Sequence', 'importId', importId, 'company.importId, codeSelect, prefixe, suffixe', company_importId, codeSelect, prefixe, suffixe)"
      check-message="Company, code, prefixe and suffixe must be unique"/>
    <bind to="yearlyResetOk" column="yearlyResetOk" eval="yearlyResetOk == '1' ? true : false"
      if="yearlyResetOk"/>
    <bind to="yearlyResetOk" column="yearlyResetOk" adapter="Boolean"/>
    <bind to="nextNum" column="nextNum" eval="nextNum?.empty ? '1' : nextNum"/>
    <bind to="padding" column="padding" eval="padding?.empty ? '1' : padding"/>
    <bind to="toBeAdded" column="toBeAdded" eval="toBeAdded?.empty ? '1' : toBeAdded"/>
    <bind to="resetDate"
      eval="call:com.axelor.apps.base.service.app.AppBaseService:getTodayDate(null)"/>
  </input>

  <input file="studio_appAccount.csv" separator=";" type="com.axelor.studio.db.AppAccount"
    search="self.app.code = :code">
    <bind column="partnerBalConfigSelect" to="partnerBalConfigSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.studio.db.AppAccount', 'partnerBalConfigSelect', partnerBalConfigSelect)"
      check-message="Invalid partnerBalConfigSelect"/>
    <bind to="app" column="code" search="self.code = :code"/>
  </input>

  <input file="account_accountingReportType.csv" separator=";"
    search="self.importId = :importId" type="com.axelor.apps.account.db.AccountingReportType">
    <bind to="name" column="name"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind to="reportExportTypeSelect" column="docType"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.account.db.AccountingReportType', 'reportExportTypeSelect', docType)"
      check-message="Invalid reportExportTypeSelect"/>
    <bind to="typeSelect" column="type"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.account.db.AccountingReportType', 'typeSelect', type)"
      check-message="Invalid typeSelect"/>
    <bind to="company" column="company" search="self.importId = :company" update="true"/>
    <bind to="comparison" column="comparison"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.account.db.AccountingReportType', 'comparison', comparison)"
      check-message="Invalid comparison"/>
  </input>

  <input file="account_analyticLevel.csv" separator=";" search="self.nbr = :nbr"
    call="com.axelor.csv.script.ImportAnalyticLevel:importAnalyticLevel"
    type="com.axelor.apps.account.db.AnalyticLevel">
    <bind column="nbr" to="nbr"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(nbr)"
      check-message="Number must not be null"/>
    <bind column="name" to="name"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.account.db.AnalyticLevel', 'nbr', nbr, 'name', name)"
      check-message="Name must be unique"/>
  </input>

  <input file="account_fixedAssetType.csv" separator=";" search="self.importId = :importId"
    type="com.axelor.apps.account.db.FixedAssetType">
    <bind column="name" to="name"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="technicalTypeSelect" to="technicalTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.account.db.FixedAssetType', 'technicalTypeSelect', technicalTypeSelect)"
      check-message="Invalid technicalTypeSelect"/>
  </input>

  <input file="account_importFecType.csv" separator=";" search="self.importId = :importId"
    type="com.axelor.apps.account.db.ImportFECType"
    call="com.axelor.csv.script.ImportImportFECType:importFECType">
    <bind column="name" to="name"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="functionalOriginSelect" to="functionalOriginSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.account.db.ImportFECType', 'functionalOriginSelect', functionalOriginSelect)"
      check-message="Invalid functionalOriginSelect"/>
  </input>

  <input file="account_assetDisposalReason.csv" separator=";"
    search="self.importId = :importId" type="com.axelor.apps.account.db.AssetDisposalReason">
    <bind column="code" to="code"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(code)"
      check-message="Code must not be null"/>
    <bind column="code" to="code"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.account.db.AssetDisposalReason', 'importId', importId, 'code', code)"
      check-message="Code must be unique"/>
    <bind column="name" to="name"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="disposalTypeSelect" to="disposalTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.account.db.AssetDisposalReason', 'disposalTypeSelect', disposalTypeSelect)"
      check-message="Invalid disposalTypeSelect"/>
  </input>

  <input file="base_partner_link_type.csv" separator=";"
    type="com.axelor.apps.base.db.PartnerLinkType"
    search="self.importId = :importId OR self.typeSelect = :typeSelect">
    <bind column="typeSelect" to="typeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.base.db.PartnerLinkType', 'typeSelect', typeSelect)"
      check-message="Invalid typeSelect"/>
  </input>

</csv-inputs>