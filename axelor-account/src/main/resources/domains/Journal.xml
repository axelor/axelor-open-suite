<?xml version="1.0" encoding="UTF-8"?>
<domain-models xmlns="http://axelor.com/xml/ns/domain-models"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://axelor.com/xml/ns/domain-models http://axelor.com/xml/ns/domain-models/domain-models_6.1.xsd">

  <module name="account" package="com.axelor.apps.account.db"/>

  <entity name="Journal" cacheable="true">

    <string name="code" title="Code"/>
    <string name="name" title="Name" required="true"/>
    <many-to-one name="journalType" ref="JournalType" title="Journal Type"
      massUpdate="true" required="true"/>
    <string name="exportCode" title="Export code" massUpdate="true"/>
    <boolean name="excessPaymentOk" title="Allow payments greater than due amount"
      massUpdate="true"/>
    <boolean name="editReceiptOk" title="Edit receipt" massUpdate="true"/>
    <string name="descriptionModel" title="Label for automatic moveline generation"
      massUpdate="true"/>
    <boolean name="descriptionIdentificationOk"
      title="Add accounting document NÂ° in the description" default="false" massUpdate="true"/>
    <boolean name="notExportOk" title="Do not export" default="false" massUpdate="true"/>
    <integer name="statusSelect" title="Status" selection="account.journal.status.select"/>
    <boolean name="isInvoiceMoveConsolidated" title="Consolidate invoice movelines"
      default="false" massUpdate="true"/>

    <many-to-one name="sequence" ref="com.axelor.apps.base.db.Sequence" title="Sequence"
      massUpdate="true"/>
    <many-to-one name="company" ref="com.axelor.apps.base.db.Company" title="Company"/>

    <many-to-many name="validAccountTypeSet"
      ref="com.axelor.apps.account.db.AccountType" title="Compatible Account Types"/>
    <many-to-many name="validAccountSet" ref="com.axelor.apps.account.db.Account"
      title="Compatible Accounts"/>
    <string name="compatiblePartnerTypeSelect" title="Compatible partner"
      selection="account.journal.compatible.partner.type.select"/>
    <boolean name="authorizeSimulatedMove" title="Authorize simulated move?"/>
    <boolean name="allowAccountingDaybook" title="Allow accounting daybook?"/>
    <string name="authorizedFunctionalOriginSelect" title="Authorized functional origin"
      selection="iaccount.move.functional.origin.select"/>

    <boolean name="hasDuplicateDetectionOnOrigin"
      title="Check duplicate entry on accounting voucher ?"
      help="If ticked, each time a move will be set to Daybook or Accounted status, a duplicate check will be executed on the field accounting voucher and check if there are for the same partner, on the same journal and fiscal year (based on the period) a similar record already existing. If unticked, no control will be executed"/>
    <boolean name="hasRequiredOrigin" title="Accounting voucher required on move lines ?"
      help="If ticked, then while inputing the move header on the journal, the field accounting voucher will be required."/>
    <string name="prefixOrigin" title="Prefix for accounting voucher"
      help="Used only during a move's reverse/copy"/>
    <boolean name="isFillOriginDate" title="Fill origin date"/>
    <boolean name="allowAccountingNewOnMassEntry"
      title="Allow generation with status new on mass entry" default="false"/>


    <unique-constraint columns="company,code"/>

    <extra-code><![CDATA[

	   	// STATUS SELECT
		public static final int STATUS_INACTIVE = 0;
		public static final int STATUS_ACTIVE = 1;
		public static final int STATUS_ARCHIVED = 2;
        public static final String IS_PROSPECT = "isProspect";
		public static final String IS_CUSTOMER = "isCustomer";
		public static final String IS_SUPPLIER = "isSupplier";
		public static final String IS_FACTOR = "isFactor";
	]]></extra-code>

  </entity>

</domain-models>