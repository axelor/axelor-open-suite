plugins {
	id 'com.axelor.app'
	id "com.github.node-gradle.node"
}

apply from: "../libs.gradle"
apply from: "../version.gradle"

apply {
	version = openSuiteVersion
}


license {
  exclude "**/swagger/**"
}

axelor {
	title "Axelor Base"
	description "Axelor Base Module"
}

dependencies {
	api libs.commons_lang3
	implementation libs.commons_math3
	implementation libs.commons_validator
	implementation libs.commons_httpclient

	implementation libs.ical4j
	implementation libs.ical4j_extensions
	implementation libs.ical4j_connector

	implementation libs.iban4j
	implementation libs.jackrabbit_webdav
	implementation libs.zxing_core
		// JSch
	implementation libs.jsch

	implementation libs.google_oauth_client_jetty
	implementation libs.google_api_services_people

	implementation libs.pac4j_core
	testImplementation libs.mockito

	api libs.tika

	if (file("../../axelor-utils").exists()) {
		api project(":modules:axelor-utils")
	}
	else {
	   api libs.axelor_utils
	}

	if (file("../../axelor-message").exists()) {
		api project(":modules:axelor-message")
	}
	else {
		api libs.axelor_message
   	}

	if (file("../../axelor-studio").exists()) {
		api project(":modules:axelor-studio")
	}
	else {
		api libs.axelor_studio
	}

	implementation libs.faker
	api libs.commons_csv
	api libs.wslite

	implementation libs.logback

	implementation libs.swagger_jaxrs

	implementation libs.pdfbox
	implementation libs.openpdf
	implementation libs.jsoup
	implementation libs.bcprov_jdk18on
	implementation libs.bcpkix_jdk18on
	implementation libs.flyingsaucer_openpdf
}

ext.reactDir = 'map-viewer'
ext.reactOutputDir = 'webapp/base/map-viewer'

node {
  	version = '22.17.1'
	yarnVersion = '1.22.19'
	download = true
	distBaseUrl = null
	nodeModulesDir = file(reactDir)
}

task installFrontDeps(type: YarnTask) {
	group = 'axelor'
	description = 'Install Front-end dependencies'

	args = ['install']
}

task buildFront(type: YarnTask) {
	group = 'axelor'
	description = 'Build Front-end'

	inputs.files("${reactDir}/package.json", "${reactDir}/yarn.lock")
	inputs.dir("${reactDir}/src")
	outputs.dir("${reactDir}/dist")

	dependsOn 'installFrontDeps'
	args = ["run", "build"]
}


task copyReactWebapp(type: Copy) {
  	destinationDir = file(rootProject.layout.buildDirectory)
	into(reactOutputDir) {
		from "${reactDir}/dist"
	}

	dependsOn 'buildFront'
}

clean {
	delete	"${reactDir}/.yarn/cache",
			"${reactDir}/.yarn/unplugged",
			"${reactDir}/.yarn/install-state.gz",
			"${reactDir}/dist",
			"${reactDir}/node_modules"
}

jar {
	dependsOn 'buildFront'
	into(reactOutputDir) {
		from "${reactDir}/dist"
		duplicatesStrategy 'exclude'
	}
}

build.dependsOn copyReactWebapp

rootProject.tasks.processResources.dependsOn copyReactWebapp
rootProject.tasks.compileJava.dependsOn copyReactWebapp
