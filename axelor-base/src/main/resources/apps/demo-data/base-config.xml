<?xml version="1.0" encoding="UTF-8"?>
<csv-inputs xmlns="http://axelor.com/xml/ns/data-import"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://axelor.com/xml/ns/data-import http://axelor.com/xml/ns/data-import/data-import_7.4.xsd">

  <!-- IMPORT DU PACKAGE 'AUTH' -->

  <input file="auth_permission.csv" separator=";" type="com.axelor.auth.db.Permission"
    search="self.name = :name">
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="object" to="object"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(object)"
      check-message="Object must not be null"/>
  </input>

  <input file="auth_role.csv" separator=";" type="com.axelor.auth.db.Role"
    search="self.name = :name">
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="permissions" to="permissions" search="self.name in :permissions"
      eval="permissions.split('\\|') as List"/>
  </input>

  <input file="auth_group.csv" separator=";" type="com.axelor.auth.db.Group"
    search="self.code = :code">
    <bind column="code" to="code"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(code)"
      check-message="Code must not be null"/>
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.auth.db.Group', 'code', code, 'name', name)"
      check-message="Name must be unique"/>
    <bind column="navigation" to="navigation"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.auth.db.Group', 'navigation', navigation)"
      check-message="Invalid navigation"/>
    <bind column="permissions" to="permissions" search="self.name in :permissions"
      eval="permissions.split('\\|') as List"/>
    <bind column="roles" to="roles" search="self.name in :roles"
      eval="roles.split('\\|') as List"/>
  </input>

  <input file="auth_group.csv" separator=";" type="com.axelor.auth.db.Group"
    search="self.code = :code">
    <bind column="code" to="code"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(code)"
      check-message="Code must not be null"/>
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.auth.db.Group', 'code', code, 'name', name)"
      check-message="Name must be unique"/>
    <bind column="navigation" to="navigation"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.auth.db.Group', 'navigation', navigation)"
      check-message="Invalid navigation"/>
    <bind column="permissions" to="permissions" search="self.name in :permissions"
      eval="permissions.split('\\|') as List"/>
    <bind column="roles" to="roles" search="self.name in :roles"
      eval="roles.split('\\|') as List"/>
    <bind column="menus_set" to="menus" search="self.name in :menus_set"
      eval="menus_set.split('\\|') as List"/>
  </input>

  <input file="meta_file.csv" separator=";" type="com.axelor.meta.db.MetaFile"
    search="self.fileName = :fileName">
    <bind column="fileName" to="fileName"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(fileName)"
      check-message="File name must not be null"/>
    <bind column="filePath" to="filePath"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(filePath)"
      check-message="File path must not be null"/>
  </input>


  <!-- IMPORT DU PACKAGE 'BASE' -->

  <input file="base_addressTemplate.csv" separator=";"
    type="com.axelor.apps.base.db.AddressTemplate" search="self.importId = :importId">
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="templateStr" to="templateStr"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(templateStr)"
      check-message="Template content must not be null"/>
    <bind column="engineSelect" to="engineSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.AddressTemplate', 'engineSelect', engineSelect)"
      check-message="Invalid engineSelect"/>
  </input>

  <input file="base_registrationNumberTemplate.csv" separator=";"
    type="com.axelor.apps.base.db.RegistrationNumberTemplate" search="self.importId = :importId">
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="validationMethodSelect" to="validationMethodSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.RegistrationNumberTemplate', 'validationMethodSelect', validationMethodSelect)"
      check-message="Invalid validationMethodSelect"/>
  </input>

  <input file="base_economicArea.csv" separator=";"
    type="com.axelor.apps.base.db.EconomicArea" search="self.importId = :importId">
    <bind column="code" to="code"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.EconomicArea', 'importId', importId, 'code', code)"
      check-message="Code must be unique"/>
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.EconomicArea', 'importId', importId, 'name', name)"
      check-message="Name must be unique"/>
  </input>

  <input file="base_country.csv" separator=";" type="com.axelor.apps.base.db.Country"
    search="self.importId = :importId">
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="addressTemplate_importId" to="addressTemplate"
      search="self.importId = :addressTemplate_importId"
      check="com.axelor.utils.helpers.ImportHelper.isRecordPresent('com.axelor.apps.base.db.AddressTemplate', 'importId', addressTemplate_importId)"
      check-message="Address template doesn't exist"/>
  </input>

  <input file="base_language.csv" separator=";" type="com.axelor.apps.base.db.Language"
    search="self.importId = :importId">
    <bind column="code" to="code"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(code)"
      check-message="Code must not be null"/>
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
  </input>

  <input file="base_localization.csv" separator=";"
    type="com.axelor.apps.base.db.Localization" search="self.importId = :importId">
    <bind column="code" to="code"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(code)"
      check-message="Code must not be null"/>
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
  </input>

  <input file="base_weeklyPlanning.csv" separator=";"
    type="com.axelor.apps.base.db.WeeklyPlanning" search="self.importId  = :importId">
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
  </input>

  <input file="base_dayPlanning.csv" separator=";" type="com.axelor.apps.base.db.DayPlanning"
    search="self.importId  = :importId">
    <bind column="nameSelect" to="nameSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.DayPlanning', 'nameSelect', nameSelect)"
      check-message="Invalid nameSelect"/>
  </input>

  <input file="base_eventsPlanning.csv" type="com.axelor.apps.base.db.EventsPlanning"
    separator=";" search="self.importId = :importId">
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
  </input>

  <input file="base_eventsPlanningLine.csv" type="com.axelor.apps.base.db.EventsPlanningLine"
    separator=";" search="self.importId = :importId">
    <bind to="date" eval="call:com.axelor.csv.script.ImportDateTime:importDate(date)"
      column="date" check="com.axelor.utils.helpers.ImportHelper.isValuePresent(date)"
      check-message="Date must not be null"/>
    <bind to="year" eval="java.time.Year.now().getValue() + year.toInteger()" column="year"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(year)"
      check-message="Year must not be null"/>
  </input>

  <input file="base_company.csv" separator=";" type="com.axelor.apps.base.db.Company"
    search="self.importId = :importId" call="com.axelor.csv.script.ImportCompany:importCompany">
    <bind column="code" to="code"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(code)"
      check-message="Code must not be null"/>
    <bind column="code" to="code"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Company', 'importId', importId, 'code', code)"
      check-message="Code must be unique"/>
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Company', 'importId', importId, 'name', name)"
      check-message="Name must be unique"/>
    <bind column="defaultPartnerTypeSelect" to="defaultPartnerTypeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.Company', 'defaultPartnerTypeSelect', defaultPartnerTypeSelect)"
      check-message="Invalid defaultPartnerTypeSelect"/>
    <bind column="defaultPartnerCategorySelect" to="defaultPartnerCategorySelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.Company', 'defaultPartnerCategorySelect', defaultPartnerCategorySelect)"
      check-message="Invalid defaultPartnerCategorySelect"/>
    <bind column="timezone" to="timezone"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.Company', 'timezone', timezone)"
      check-message="Invalid timezone"/>
  </input>

  <input file="base_sequence.csv" separator=";" type="com.axelor.apps.base.db.Sequence"
    search="self.importId = :importId" call="com.axelor.csv.script.ImportSequence:importSequence">
    <bind column="codeSelect" to="codeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.Sequence', 'codeSelect', codeSelect)"
      check-message="Invalid codeSelect"/>
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="sequenceTypeSelect" to="sequenceTypeSelect"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(sequenceTypeSelect)"
      check-message="Sequence type must not be null"/>
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.utils.helpers.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Company', 'importId', company_importId)"
      check-message="Company doesn't exist"/>
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Sequence', 'importId', importId, 'company.importId, codeSelect, prefixe, suffixe', company_importId, codeSelect, prefixe, suffixe)"
      check-message="Company, code, prefixe and suffixe must be unique"/>
    <bind to="yearlyResetOk" column="yearlyResetOk" eval="yearlyResetOk == '1' ? true : false"
      if="yearlyResetOk"/>
    <bind to="nextNum" column="nextNum" eval="nextNum?.empty ? '1' : nextNum"/>
    <bind to="padding" column="padding" eval="padding?.empty ? '1' : padding"/>
    <bind to="toBeAdded" column="toBeAdded" eval="toBeAdded?.empty ? '1' : toBeAdded"/>
  </input>

  <input file="base_birtTemplate.csv" separator=";"
    type="com.axelor.apps.base.db.BirtTemplate" search="self.importId = :importId">
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="format" to="format"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.BirtTemplate', 'format', format)"
      check-message="Invalid format"/>
    <bind column="templateEngineSelect" to="templateEngineSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.BirtTemplate', 'templateEngineSelect', templateEngineSelect)"
      check-message="Invalid templateEngineSelect"/>
    <bind to="metaModel" search="self.fullName = :modelName"/>
  </input>

  <input file="base_birtTemplateParameter.csv" separator=";"
    type="com.axelor.apps.base.db.BirtTemplateParameter" search="self.importId = :importId">
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="type" to="type"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.BirtTemplateParameter', 'type', type)"
      check-message="Invalid type"/>
  </input>

  <input file="base_printSetting.csv" separator=";"
    type="com.axelor.apps.base.db.PrintingSettings" search="self.importId = :importId">
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="logoPositionSelect" to="logoPositionSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.PrintingSettings', 'logoPositionSelect', logoPositionSelect)"
      check-message="Invalid logoPositionSelect"/>
    <bind column="addressPositionSelect" to="addressPositionSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.PrintingSettings', 'addressPositionSelect', addressPositionSelect)"
      check-message="Invalid addressPositionSelect"/>
  </input>

  <input file="base_template.csv" separator=";" type="com.axelor.message.db.Template"
    search="self.name = :name">
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="mediaTypeSelect" to="mediaTypeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.message.db.Template', 'mediaTypeSelect', mediaTypeSelect)"
      check-message="Invalid mediaTypeSelect"/>
    <bind column="templateEngineSelect" to="templateEngineSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.message.db.Template', 'templateEngineSelect', templateEngineSelect)"
      check-message="Invalid templateEngineSelect"/>
    <bind column="language" to="language"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.message.db.Template', 'language', language)"
      check-message="Invalid language"/>
    <bind column="printTemplateSet_importId" to="printTemplateSet"
      search="self.importId in :printTemplateSet_importId"
      eval="printTemplateSet_importId.split('\\|') as List" update="true"/>
  </input>

  <input file="base_team.csv" separator=";" type="com.axelor.team.db.Team"
    search="self.importId = :importId">
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.team.db.Team', 'importId', importId, 'name', name)"
      check-message="Name must be unique"/>
    <bind column="typeSelect" to="typeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.team.db.Team', 'typeSelect', typeSelect)"
      check-message="Invalid typeSelect"/>
    <bind column="members" to="members" search="self.code in :members"
      eval="members.split('\\|') as List"/>
  </input>

  <input file="base_source.csv" separator=";" type="com.axelor.apps.base.db.Source"
    search="self.code = :code"/>

  <input file="base_addressTemplateLine.csv" separator=";"
    type="com.axelor.apps.base.db.AddressTemplateLine" search="self.importId = :importId">
    <bind to="metaField" column="metaField"
      search="self.name = :metaField AND self.metaModel.name = :metaModel"
      check="com.axelor.utils.helpers.ImportHelper.isRecordPresent('com.axelor.meta.db.MetaField', 'name, metaModel.name', metaField, metaModel)"
      check-message="Meta field doesn't exist"/>
  </input>

  <input file="base_country.csv" separator=";" type="com.axelor.apps.base.db.Country"
    search="self.importId = :importId">
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="addressTemplate_importId" to="addressTemplate"
      search="self.importId = :addressTemplate_importId"
      check="com.axelor.utils.helpers.ImportHelper.isRecordPresent('com.axelor.apps.base.db.AddressTemplate', 'importId', addressTemplate_importId)"
      check-message="Address template doesn't exist"/>
  </input>

  <input file="base_region.csv" separator=";" type="com.axelor.apps.base.db.Region"
    search="self.importId = :importId">
    <bind column="code" to="code"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(code)"
      check-message="Code must not be null"/>
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="country_alpha3Code" to="country"
      search="self.alpha3Code = :country_alpha3Code"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Region', 'importId', importId, 'code, country.alpha3Code', code, country_alpha3Code)"
      check-message="Code and country must be unique"/>
  </input>

  <input file="base_departement.csv" separator=";" type="com.axelor.apps.base.db.Department"
    search="self.importId = :importId">
    <bind column="code" to="code"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(code)"
      check-message="Code must not be null"/>
    <bind column="code" to="code"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Department', 'importId', importId, 'code, name', code, name)"
      check-message="Code and name must be unique"/>
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
  </input>

  <input file="base_indicator_generator.csv" separator=","
    type="com.axelor.apps.base.db.IndicatorGenerator" search="self.importId = :importId">
    <bind column="code" to="code"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.IndicatorGenerator', 'importId',
      importId, 'code', code)"
      check-message="Code must be unique"/>
    <bind column="requestLanguage" to="requestLanguage"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.IndicatorGenerator', 'requestLanguage', requestLanguage)"
      check-message="Invalid requestLanguage"/>
  </input>

  <input file="base_canton.csv" separator=";" type="com.axelor.apps.base.db.Canton"
    search="self.code = :code">
    <bind column="code" to="code"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(code)"
      check-message="Code must not be null"/>
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="artmin" to="artmin"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.Canton', 'artmin', artmin)"
      check-message="Invalid artmin"/>
  </input>

  <input file="base_city.csv" separator=";" type="com.axelor.apps.base.db.City"
    search="self.importId = :importId">
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="artmin" to="artmin"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.City', 'artmin', artmin)"
      check-message="Invalid artmin"/>
    <bind to="country" column="country_alpha3Code"
      search="self.alpha3Code = :country_alpha3Code" update="true"/>
  </input>

  <input file="base_address.csv" separator=";" type="com.axelor.apps.base.db.Address"
    search="self.importId = :importId" call="com.axelor.csv.script.ImportAddress:importAddress">
    <bind column="cityName" to="city" search="self.name = :cityName" update="true"/>
    <bind column="country_alpha3Code" to="country"
      search="self.alpha3Code = :country_alpha3Code"
      check="com.axelor.utils.helpers.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Country', 'alpha3Code', country_alpha3Code)"
      check-message="Country doesn't exist"/>
  </input>

  <input file="base_currency.csv" separator=";" type="com.axelor.apps.base.db.Currency"
    search="self.code = :code">
    <bind column="code" to="code"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(code)"
      check-message="Code must not be null"/>
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="codeISO" to="codeISO"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(codeISO)"
      check-message="Iso code must not be null"/>
    <bind column="codeISO" to="codeISO"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Currency', 'code', code, 'codeISO', codeISO)"
      check-message="Iso code must be unique"/>
  </input>

  <input file="base_unit.csv" separator=";" type="com.axelor.apps.base.db.Unit"
    search="self.importId = :importId">
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="unitTypeSelect" to="unitTypeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.Unit', 'unitTypeSelect', unitTypeSelect)"
      check-message="Invalid unitTypeSelect"/>
  </input>

  <input file="base_unitConversion.csv" separator=";"
    type="com.axelor.apps.base.db.UnitConversion" search="self.importId = :importId">
    <bind column="startUnit_importId" to="startUnit"
      search="self.importId = :startUnit_importId"
      check="com.axelor.utils.helpers.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Unit', 'importId', startUnit_importId)"
      check-message="Start unit doesn't exist"/>
    <bind column="endUnit_importId" to="endUnit" search="self.importId = :endUnit_importId"
      check="com.axelor.utils.helpers.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Unit', 'importId', endUnit_importId)"
      check-message="End unit doesn't exist"/>
    <bind column="coef" to="coef"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(coef)"
      check-message="Coeff. must not be null"/>
    <bind column="typeSelect" to="typeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.UnitConversion', 'typeSelect', typeSelect)"
      check-message="Invalid typeSelect"/>
    <bind column="entitySelect" to="entitySelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.UnitConversion', 'entitySelect', entitySelect)"
      check-message="Invalid entitySelect"/>
  </input>

  <input file="base_partnerCategory.csv" separator=";"
    type="com.axelor.apps.base.db.PartnerCategory" search="self.importId = :importId">
    <bind column="code" to="code"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(code)"
      check-message="Code must not be null"/>
    <bind column="code" to="code"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.PartnerCategory', 'importId', importId, 'code', code)"
      check-message="Code must be unique"/>
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
  </input>

  <input file="base_duration.csv" separator=";" type="com.axelor.apps.base.db.Duration"
    search="self.importId = :importId">
    <bind column="typeSelect" to="typeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.Duration', 'typeSelect', typeSelect)"
      check-message="Invalid typeSelect"/>
    <bind column="applicationTypeSelect" to="applicationTypeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.Duration', 'applicationTypeSelect', applicationTypeSelect)"
      check-message="Invalid applicationTypeSelect"/>
  </input>

  <input file="base_partner.csv" separator=";" type="com.axelor.apps.base.db.Partner"
    search="self.importId = :importId" call="com.axelor.csv.script.ImportPartner:importPartner">
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name/Company name must not be null"/>
    <bind column="partnerSeq" to="partnerSeq"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Partner', 'importId',
      importId, 'partnerSeq', partnerSeq)"
      check-message="Reference must be unique"/>
    <bind column="partnerTypeSelect" to="partnerTypeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.Partner', 'partnerTypeSelect', partnerTypeSelect)"
      check-message="Invalid partnerTypeSelect"/>
    <bind column="titleSelect" to="titleSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.Partner', 'titleSelect', titleSelect)"
      check-message="Invalid titleSelect"/>
    <bind to="emailAddress" if="email &amp;&amp; email.trim() != ''"
      search="self.partner.importId = :importId"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Partner', 'importId', importId, 'emailAddress.address', email)"
      check-message="Email address must be unique">
      <bind to="address" column="email"/>
    </bind>
    <bind to="partnerAddressList"
      search="self.address.importId = :address AND self.partner.importId = :importId"
      if="address != null &amp;&amp; isContact == 'false'">
      <bind to="address" search="self.importId = :address" update="true"/>
      <bind to="isInvoicingAddr" eval="true"/>
      <bind to="isDeliveryAddr" eval="true"/>
      <bind to="isDefaultAddr" eval="true"/>
    </bind>
    <bind to="mainAddress" search="self.importId = :address" if="address != null" update="true"/>
    <bind to="inPaymentMode" column="inPaymentMode.importId" if="false"/>
    <bind to="outPaymentMode" column="outPaymentMode.importId" if="false"/>
    <bind to="paymentCondition" column="paymentCondition.importId" if="false"/>
  </input>

  <!-- A BESOIN DE PARTNER -->
  <input file="base_bank.csv" separator=";" type="com.axelor.apps.base.db.Bank"
    search="self.importId = :importId">
    <bind column="code" to="code"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(code)"
      check-message="BIC (Bank Identifier) must not be null"/>
    <bind column="code" to="code"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Bank', 'importId', importId, 'code', code)"
      check-message="BIC (Bank Identifier) must be unique"/>
    <bind column="bankDetailsTypeSelect" to="bankDetailsTypeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.Bank', 'bankDetailsTypeSelect', bankDetailsTypeSelect)"
      check-message="Invalid bankDetailsTypeSelect"/>
  </input>

  <input file="base_bankAddress.csv" separator=";" type="com.axelor.apps.base.db.BankAddress"
    search="self.importId = :importId">
    <bind to="fullAddress"
      eval="call:com.axelor.apps.base.service.BankAddressService:computeFullAddress(null, address, null)"/>
  </input>

  <input file="base_bankDetails.csv" separator=";" type="com.axelor.apps.base.db.BankDetails">
    <bind column="iban" to="iban"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(iban)"
      check-message="IBAN / BBAN must not be null"/>
    <bind column="bank_importId" to="bank" search="self.importId = :bank_importId"
      check="com.axelor.utils.helpers.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Bank', 'importId', bank_importId)"
      check-message="BIC (Bank Identifier) doesn't exist"/>
    <bind to="partner" column="partner_importId" search="self.importId =:partner_importId"
      update="true"/>
    <bind to="isDefault" eval="true"/>
  </input>

  <input file="base_company.csv" separator=";" type="com.axelor.apps.base.db.Company"
    search="self.importId = :importId" call="com.axelor.csv.script.ImportCompany:importCompany">
    <bind column="code" to="code"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(code)"
      check-message="Code must not be null"/>
    <bind column="code" to="code"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Company', 'importId', importId, 'code', code)"
      check-message="Code must be unique"/>
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Company', 'importId', importId, 'name', name)"
      check-message="Name must be unique"/>
    <bind column="defaultPartnerTypeSelect" to="defaultPartnerTypeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.Company', 'defaultPartnerTypeSelect', defaultPartnerTypeSelect)"
      check-message="Invalid defaultPartnerTypeSelect"/>
    <bind column="defaultPartnerCategorySelect" to="defaultPartnerCategorySelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.Company', 'defaultPartnerCategorySelect', defaultPartnerCategorySelect)"
      check-message="Invalid defaultPartnerCategorySelect"/>
    <bind column="timezone" to="timezone"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.Company', 'timezone', timezone)"
      check-message="Invalid timezone"/>
  </input>

  <input file="base_year.csv" separator=";" type="com.axelor.apps.base.db.Year"
    search="self.importId = :importId" call="com.axelor.csv.script.ImportYear:importYear">
    <bind column="code" to="code"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(code)"
      check-message="Code must not be null"/>
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="typeSelect" to="typeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.Year', 'typeSelect', typeSelect)"
      check-message="Invalid typeSelect"/>
    <bind column="statusSelect" to="statusSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.Year', 'statusSelect', statusSelect)"
      check-message="Invalid statusSelect"/>
    <bind column="periodDurationSelect" to="periodDurationSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.Year', 'periodDurationSelect', periodDurationSelect)"
      check-message="Invalid periodDurationSelect"/>
    <bind to="fromDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(fromDate)"
      column="fromDate" check="com.axelor.utils.helpers.ImportHelper.isValuePresent(fromDate)"
      check-message="From date must not be null"/>
    <bind to="toDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(toDate)"
      column="toDate" check="com.axelor.utils.helpers.ImportHelper.isValuePresent(toDate)"
      check-message="To date must not be null"/>
    <bind to="yearCode"
      eval="call:com.axelor.csv.script.ImportYear:computeCode(code, fromDate)"/>
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Year', 'importId', importId, 'code, company.importId, typeSelect', yearCode, company_importId, typeSelect)"
      check-message="Code, company and type must be unique"/>
    <bind to="reportedBalanceDate"
      eval="call:com.axelor.csv.script.ImportDateTime:importDate(reportedBalanceDate)"
      column="reportedBalanceDate"/>
  </input>

  <input file="base_currencyConversionLine.csv" separator=";"
    type="com.axelor.apps.base.db.CurrencyConversionLine" search="self.importId = :importId">
    <bind column="startCurrency_code" to="startCurrency"
      search="self.code = :startCurrency_code"
      check="com.axelor.utils.helpers.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Currency', 'code', startCurrency_code)"
      check-message="Start currency doesn't exist"/>
    <bind column="endCurrency_code" to="endCurrency" search="self.code = :endCurrency_code"
      check="com.axelor.utils.helpers.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Currency', 'code', endCurrency_code)"
      check-message="End currency doesn't exist"/>
    <bind to="appBase" column="appBase" search="self.app.code = :appBase" update="true"/>
    <bind to="fromDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(fromDate)"
      column="fromDate" check="com.axelor.utils.helpers.ImportHelper.isValuePresent(fromDate)"
      check-message="From date must not be null"/>
    <bind to="toDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(toDate)"
      column="toDate"/>
  </input>

  <input file="base_companyDepartment.csv" separator=";"
    type="com.axelor.apps.base.db.CompanyDepartment">
    <bind column="id" to="importId"/>
    <bind column="code" to="code"/>
    <bind column="name" to="name"/>
    <bind column="company" to="company"/>
  </input>

  <input file="base_productFamily.csv" separator=";"
    type="com.axelor.apps.base.db.ProductFamily" search="self.code = :code">
    <bind column="code" to="code"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(code)"
      check-message="Family code must not be null"/>
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Family name must not be null"/>
  </input>

  <input file="base_productCategory.csv" separator=";"
    type="com.axelor.apps.base.db.ProductCategory" search="self.code = :code">
    <bind column="code" to="code"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(code)"
      check-message="Code must not be null"/>
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.ProductCategory', 'code', code, 'name', name)"
      check-message="Name must be unique"/>
  </input>

  <input file="base_product.csv" separator=";" type="com.axelor.apps.base.db.Product"
    search="self.importId = :importId" call="com.axelor.csv.script.ImportProduct:importProduct">
    <bind column="code" to="code"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Product', 'importId', importId, 'code', code)"
      check-message="Code must be unique"/>
    <bind column="serialNumber" to="serialNumber"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Product', 'importId', importId, 'serialNumber', serialNumber)"
      check-message="Serial number must be unique"/>
    <bind column="saleSupplySelect" to="saleSupplySelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.Product', 'saleSupplySelect', saleSupplySelect)"
      check-message="Invalid saleSupplySelect"/>
    <bind column="productTypeSelect" to="productTypeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.Product', 'productTypeSelect', productTypeSelect)"
      check-message="Invalid productTypeSelect"/>
    <bind column="procurementMethodSelect" to="procurementMethodSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.Product', 'procurementMethodSelect', procurementMethodSelect)"
      check-message="Invalid procurementMethodSelect"/>
    <bind column="productSubTypeSelect" to="productSubTypeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.Product', 'productSubTypeSelect', productSubTypeSelect)"
      check-message="Invalid productSubTypeSelect"/>
    <bind column="inventoryTypeSelect" to="inventoryTypeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.Product', 'inventoryTypeSelect', inventoryTypeSelect)"
      check-message="Invalid inventoryTypeSelect"/>
    <bind column="versionSelect" to="versionSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.Product', 'versionSelect', versionSelect)"
      check-message="Invalid versionSelect"/>
    <bind column="costTypeSelect" to="costTypeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.Product', 'costTypeSelect', costTypeSelect)"
      check-message="Invalid costTypeSelect"/>
    <bind to="startDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(startDate)"
      column="startDate"/>
    <bind to="createdOn" eval="call:com.axelor.csv.script.ImportDateTime:importDate(startDate)"
      column="startDate"/>
    <bind to="netMass" eval="1" if="productTypeSelect == 'storable' &amp;&amp; netMass == null"/>
    <bind to="grossMass" eval="1"
      if="productTypeSelect == 'storable' &amp;&amp; grossMass == null"/>
    <bind to="isShippingCostsProduct" column="isShippingCostsProduct"
      eval="isShippingCostsProduct ? isShippingCostsProduct : 'false'"/>
  </input>

  <input file="base_productVariantAttr.csv" separator=";"
    type="com.axelor.apps.base.db.ProductVariantAttr" search="self.code = :code">
    <bind column="code" to="code"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(code)"
      check-message="Code must not be null"/>
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
  </input>

  <input file="base_productVariantValue.csv" separator=";"
    type="com.axelor.apps.base.db.ProductVariantValue" search="self.code = :code">
    <bind column="code" to="code"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(code)"
      check-message="Code must not be null"/>
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="colorSelect" to="colorSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.ProductVariantValue', 'colorSelect', colorSelect)"
      check-message="Invalid colorSelect"/>
    <bind column="applicationPriceSelect" to="applicationPriceSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.ProductVariantValue', 'applicationPriceSelect', applicationPriceSelect)"
      check-message="Invalid applicationPriceSelect"/>
  </input>

  <input file="base_productVariantConfig.csv" separator=";"
    type="com.axelor.apps.base.db.Product" search="self.importId = :importId"
    call="com.axelor.csv.script.ImportProduct:generateVariant">
    <bind column="code" to="code"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Product', 'importId', importId, 'code', code)"
      check-message="Code must be unique"/>
    <bind column="serialNumber" to="serialNumber"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Product', 'importId', importId, 'serialNumber', serialNumber)"
      check-message="Serial number must be unique"/>
    <bind column="saleSupplySelect" to="saleSupplySelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.Product', 'saleSupplySelect', saleSupplySelect)"
      check-message="Invalid saleSupplySelect"/>
    <bind column="productTypeSelect" to="productTypeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.Product', 'productTypeSelect', productTypeSelect)"
      check-message="Invalid productTypeSelect"/>
    <bind column="procurementMethodSelect" to="procurementMethodSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.Product', 'procurementMethodSelect', procurementMethodSelect)"
      check-message="Invalid procurementMethodSelect"/>
    <bind column="productSubTypeSelect" to="productSubTypeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.Product', 'productSubTypeSelect', productSubTypeSelect)"
      check-message="Invalid productSubTypeSelect"/>
    <bind column="inventoryTypeSelect" to="inventoryTypeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.Product', 'inventoryTypeSelect', inventoryTypeSelect)"
      check-message="Invalid inventoryTypeSelect"/>
    <bind column="versionSelect" to="versionSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.Product', 'versionSelect', versionSelect)"
      check-message="Invalid versionSelect"/>
    <bind column="costTypeSelect" to="costTypeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.Product', 'costTypeSelect', costTypeSelect)"
      check-message="Invalid costTypeSelect"/>
    <bind to="productVariantConfig">
      <bind to="productVariantAttr1" column="productVariantAttr1"
        search="self.code = :productVariantAttr1" update="true" if="productVariantAttr1 != null"/>
      <bind to="productVariantAttr2" column="productVariantAttr2"
        search="self.code = :productVariantAttr2" update="true" if="productVariantAttr2 != null"/>
      <bind to="productVariantAttr3" column="productVariantAttr3"
        search="self.code = :productVariantAttr3" update="true" if="productVariantAttr3 != null"/>
      <bind to="productVariantAttr4" column="productVariantAttr4"
        search="self.code = :productVariantAttr4" update="true" if="productVariantAttr4 != null"/>
      <bind column="productVariantValue1" to="productVariantValue1Set"
        search="self.code in :productVariantValue1" eval="productVariantValue1.split('\\|') as List"
        if="productVariantValue1 != null"/>
      <bind column="productVariantValue2" to="productVariantValue2Set"
        search="self.code in :productVariantValue2" eval="productVariantValue2.split('\\|') as List"
        if="productVariantValue2 != null"/>
      <bind column="productVariantValue3" to="productVariantValue3Set"
        search="self.code in :productVariantValue3" eval="productVariantValue3.split('\\|') as List"
        if="productVariantValue3 != null"/>
      <bind column="productVariantValue4" to="productVariantValue4Set"
        search="self.code in :productVariantValue4" eval="productVariantValue4.split('\\|') as List"
        if="productVariantValue4 != null"/>
    </bind>
  </input>

  <input file="base_partner.csv" separator=";" search="self.importId = :importId"
    update="true" type="com.axelor.apps.base.db.Partner">
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name/Company name must not be null"/>
    <bind column="partnerSeq" to="partnerSeq"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Partner', 'importId',
      importId, 'partnerSeq', partnerSeq)"
      check-message="Reference must be unique"/>
    <bind column="partnerTypeSelect" to="partnerTypeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.Partner', 'partnerTypeSelect', partnerTypeSelect)"
      check-message="Invalid partnerTypeSelect"/>
    <bind column="titleSelect" to="titleSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.Partner', 'titleSelect', titleSelect)"
      check-message="Invalid titleSelect"/>
    <bind to="emailAddress" if="email &amp;&amp; email.trim() != ''"
      search="self.partner.importId = :importId"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Partner', 'importId', importId, 'emailAddress.address', email)"
      check-message="Email address must be unique">
      <bind to="address" column="email"/>
    </bind>
    <bind column="companySet_importId" to="companySet"
      search="self.importId in :companySet_importId" eval="companySet_importId.split('\\|') as List"
      update="true"/>
    <bind to="mainPartner" search="self.importId = :mainPartner_importId" update="true"/>
    <bind to="mainPartner" search="self.importId = :mainPartner_importId" update="true"
      if="mainPartner_importId"/>
    <bind to="inPaymentMode" column="inPaymentMode.importId" if="false"/>
    <bind to="outPaymentMode" column="outPaymentMode.importId" if="false"/>
    <bind to="paymentCondition" column="paymentCondition.importId" if="false"/>
  </input>

  <input file="base_partner.csv" separator=";" search="self.importId = :importId"
    update="true" type="com.axelor.apps.base.db.Partner"
    call="com.axelor.csv.script.ImportPartner:updateContacts">
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name/Company name must not be null"/>
    <bind column="partnerSeq" to="partnerSeq"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Partner', 'importId',
      importId, 'partnerSeq', partnerSeq)"
      check-message="Reference must be unique"/>
    <bind column="partnerTypeSelect" to="partnerTypeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.Partner', 'partnerTypeSelect', partnerTypeSelect)"
      check-message="Invalid partnerTypeSelect"/>
    <bind column="titleSelect" to="titleSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.Partner', 'titleSelect', titleSelect)"
      check-message="Invalid titleSelect"/>
    <bind to="emailAddress" if="email &amp;&amp; email.trim() != ''"
      search="self.partner.importId = :importId"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Partner', 'importId', importId, 'emailAddress.address', email)"
      check-message="Email address must be unique">
      <bind to="address" column="email"/>
    </bind>
    <bind column="importId" to="importId"/>
  </input>

  <input file="base_company.csv" separator=";" type="com.axelor.apps.base.db.Company"
    search="self.importId = :importId" update="true"
    call="com.axelor.csv.script.UpdateAll:updatePeriod">
    <bind column="code" to="code"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(code)"
      check-message="Code must not be null"/>
    <bind column="code" to="code"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Company', 'importId', importId, 'code', code)"
      check-message="Code must be unique"/>
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Company', 'importId', importId, 'name', name)"
      check-message="Name must be unique"/>
    <bind column="defaultPartnerTypeSelect" to="defaultPartnerTypeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.Company', 'defaultPartnerTypeSelect', defaultPartnerTypeSelect)"
      check-message="Invalid defaultPartnerTypeSelect"/>
    <bind column="defaultPartnerCategorySelect" to="defaultPartnerCategorySelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.Company', 'defaultPartnerCategorySelect', defaultPartnerCategorySelect)"
      check-message="Invalid defaultPartnerCategorySelect"/>
    <bind column="timezone" to="timezone"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.Company', 'timezone', timezone)"
      check-message="Invalid timezone"/>
    <bind column="importId" to="importId"/>
  </input>

  <input file="studio_appBase.csv" separator=";" type="com.axelor.studio.db.AppBase"
    search="self.app.code = :code" update="true">
    <bind column="mapApiSelect" to="mapApiSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.studio.db.AppBase', 'mapApiSelect', mapApiSelect)"
      check-message="Invalid mapApiSelect"/>
    <bind column="currencyWsURL" to="currencyWsURL"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.studio.db.AppBase', 'currencyWsURL', currencyWsURL)"
      check-message="Invalid currencyWsURL"/>
    <bind column="productInAtiSelect" to="productInAtiSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.studio.db.AppBase', 'productInAtiSelect', productInAtiSelect)"
      check-message="Invalid productInAtiSelect"/>
    <bind column="regroupProductsTypeSelect" to="regroupProductsTypeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.studio.db.AppBase', 'regroupProductsTypeSelect', regroupProductsTypeSelect)"
      check-message="Invalid regroupProductsTypeSelect"/>
    <bind column="regroupProductsLevelSelect" to="regroupProductsLevelSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.studio.db.AppBase', 'regroupProductsLevelSelect', regroupProductsLevelSelect)"
      check-message="Invalid regroupProductsLevelSelect"/>
    <bind column="computeMethodDiscountSelect" to="computeMethodDiscountSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.studio.db.AppBase', 'computeMethodDiscountSelect', computeMethodDiscountSelect)"
      check-message="Invalid computeMethodDiscountSelect"/>
    <bind column="timeLoggingPreferenceSelect" to="timeLoggingPreferenceSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.studio.db.AppBase', 'timeLoggingPreferenceSelect', timeLoggingPreferenceSelect)"
      check-message="Invalid timeLoggingPreferenceSelect"/>
    <bind column="productSequenceTypeSelect" to="productSequenceTypeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.studio.db.AppBase', 'productSequenceTypeSelect', productSequenceTypeSelect)"
      check-message="Invalid productSequenceTypeSelect"/>
    <bind column="shortcutMultiSelect" to="shortcutMultiSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.studio.db.AppBase', 'shortcutMultiSelect', shortcutMultiSelect)"
      check-message="Invalid shortcutMultiSelect"/>
    <bind to="companySpecificProductFieldsSet" column="companySpecificFieldName"
      search="self.name IN :companySpecificFieldName AND self.metaModel.name = 'Product'"
      eval="companySpecificFieldName.split('\\|') as List"/>
  </input>


  <input file="auth_user.csv" separator=";" type="com.axelor.auth.db.User"
    search="self.code = :code" call="com.axelor.csv.script.ImportUser:importUser">
    <bind column="code" to="code"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(code)"
      check-message="Code must not be null"/>
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="password" to="password"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(password)"
      check-message="Password must not be null"/>
    <bind column="email" to="email"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.auth.db.User', 'code', code, 'email', email)"
      check-message="Email must be unique"/>
    <bind column="partner_importId" to="partner" search="self.importId = :partner_importId"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.auth.db.User', 'importId', importId, 'partner.importId', partner_importId)"
      check-message="Partner must be unique"/>
    <bind column="stepStatusSelect" to="stepStatusSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.auth.db.User', 'stepStatusSelect', stepStatusSelect)"
      check-message="Invalid stepStatusSelect"/>
  </input>

  <input file="account_taxType.csv" separator=";" type="com.axelor.apps.account.db.TaxType"
    search="self.code = :code">
    <bind column="code" to="code"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(code)"
      check-message="Code must not be null"/>
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="typeSelect" to="typeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.account.db.TaxType', 'typeSelect', typeSelect)"
      check-message="Invalid typeSelect"/>
  </input>

  <input file="account_tax.csv" separator=";" type="com.axelor.apps.account.db.Tax"
    search="self.code = :code">
    <bind column="code" to="code"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(code)"
      check-message="Code must not be null"/>
    <bind column="code" to="code"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.apps.account.db.Tax', 'code', code, 'code, name', code, name)"
      check-message="Code and name must be unique"/>
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="taxType_importId" to="taxType" search="self.importId = :taxType_importId"
      check="com.axelor.utils.helpers.ImportHelper.isRecordPresent('com.axelor.apps.account.db.TaxType', 'importId', taxType_importId)"
      check-message="Tax type doesn't exist"/>
  </input>

  <input file="account_taxLine.csv" separator=";" type="com.axelor.apps.account.db.TaxLine"
    search="self.importId = :importId and self.tax.code = :tax_code">
    <bind column="startDate" to="startDate"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(startDate)"
      check-message="Application start date must not be null"/>
    <bind to="tax" search="self.code = :tax_code"/>
  </input>

  <input file="account_tax.csv" separator=";" update="true" search="self.importId = :importId"
    type="com.axelor.apps.account.db.Tax">
    <bind column="code" to="code"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(code)"
      check-message="Code must not be null"/>
    <bind column="code" to="code"
      check="com.axelor.utils.helpers.ImportHelper.checkUniqueConstraint('com.axelor.apps.account.db.Tax', 'importId', importId, 'code, name', code, name)"
      check-message="Code and name must be unique"/>
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="taxType_importId" to="taxType" search="self.importId = :taxType_importId"
      check="com.axelor.utils.helpers.ImportHelper.isRecordPresent('com.axelor.apps.account.db.TaxType', 'importId', taxType_importId)"
      check-message="Tax type doesn't exist"/>
    <bind to="activeTaxLine" search="self.importId = :_activeTaxLine AND self.tax.code = :code"
      update="true"/>
  </input>

  <input file="account_accountManagement.csv" separator=";"
    type="com.axelor.apps.account.db.AccountManagement" search="self.importId = :importId">
    <bind search="self.importId = :company_id" to="company" update="true"
      check="com.axelor.utils.helpers.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Company', 'importId', company_id)"
      check-message="Company doesn't exist"/>
    <bind column="typeSelect" to="typeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.account.db.AccountManagement', 'typeSelect', typeSelect)"
      check-message="Invalid typeSelect"/>
    <bind search="self.code = :cashAccount_code and self.company.importId = :company_id"
      to="cashAccount" update="true" if="cashAccount_code"/>
    <bind search="self.code = :saleAccount_code and self.company.importId = :company_id"
      to="saleAccount" update="true" if="saleAccount_code"/>
    <bind search="self.code = :purchaseAccount_code and self.company.importId = :company_id"
      to="purchaseAccount" update="true" if="purchaseAccount_code"/>
    <bind search="self.importId = :sequence_importId and self.company.importId = :company_id"
      to="sequence" update="true" if="sequence_importId"/>
    <bind search="self.importId = :journal_importId and self.company.importId = :company_id"
      to="journal" update="true" if="journal_importId"/>
    <bind search="self.importId = :bankDetails_importId" to="bankDetails" update="true"
      if="bankDetails_importId"/>
    <bind search="self.code in :saleTaxSet" to="saleTaxSet" column="saleTaxSet"
      eval="saleTaxSet.split('\\|') as List"/>
    <bind search="self.code in :purchaseTaxSet" to="purchaseTaxSet" column="purchaseTaxSet"
      eval="purchaseTaxSet.split('\\|') as List"/>
  </input>

  <input file="meta_metaTranslation.csv" separator=";"
    type="com.axelor.meta.db.MetaTranslation" search="self.key = :key AND self.language = :language">
    <bind column="key" to="key"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(key)"
      check-message="Message key must not be null"/>
    <bind column="language" to="language"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(language)"
      check-message="Language must not be null"/>
  </input>

  <input file="base_citizenship.csv" separator=";" type="com.axelor.apps.base.db.Citizenship"/>

  <input file="base_fileType.csv" type="com.axelor.apps.base.db.FileType" separator=";"/>

  <input file="base_globalTrackingConfigurationLine.csv" separator=";"
    type="com.axelor.apps.base.db.GlobalTrackingConfigurationLine"
    search="self.metaModel.name = :metaModel AND self.metaField.name = :field">
    <bind column="metaModel" to="metaModel" search="self.name = :metaModel"
      check="com.axelor.utils.helpers.ImportHelper.isRecordPresent('com.axelor.meta.db.MetaModel', 'name', metaModel)"
      check-message="Meta model doesn't exist"/>
    <bind column="field" to="metaField"
      search="(self.metaModel.name = :metaModel) AND (self.name = :field)"
      check="com.axelor.utils.helpers.ImportHelper.isRecordPresent('com.axelor.meta.db.MetaField', 'name, metaModel.name', field, metaModel)"
      check-message="Meta field doesn't exist"/>
    <bind column="Creation" to="trackCreation" adapter="Boolean"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(Creation)"
      check-message="Track creation must not be null"/>
    <bind column="Deletion" to="trackDeletion" adapter="Boolean"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(Deletion)"
      check-message="Track deletion must not be null"/>
    <bind column="Update" to="trackUpdate" adapter="Boolean"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(Update)"
      check-message="Track update must not be null"/>
    <bind column="Export" to="trackExport" adapter="Boolean"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(Export)"
      check-message="Track export must not be null"/>
    <bind column="Reading" to="trackReading" adapter="Boolean"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(Reading)"
      check-message="Track reading must not be null"/>
    <bind column="Condition" to="trackingCondition"/>
    <bind to="appBase" search="self.id = '1'"
      check="com.axelor.utils.helpers.ImportHelper.isRecordPresent('com.axelor.studio.db.AppBase', 'id', '1')"
      check-message="App base with id 1 doesn't exist"/>
  </input>

  <input file="base_mailBatch.csv" separator=";" type="com.axelor.apps.base.db.MailBatch"
    search="self.code = :code">
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.utils.helpers.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Company','importId', company_importId)"
      check-message="Company doesn't exist"/>
    <bind column="actionSelect" to="actionSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.base.db.MailBatch', 'actionSelect', actionSelect)"
      check-message="Invalid actionSelect"/>
  </input>

  <input file="base_main_activity.csv" separator=";"
    type="com.axelor.apps.base.db.MainActivity" search="self.code= :code">
    <bind column="code" to="code"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(code)"
      check-message="Code must not be null"/>
    <bind column="shortName" to="shortName"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(shortName)"
      check-message="Short name must not be null"/>
  </input>

  <input file="base_anonymizer.csv" type="com.axelor.apps.base.db.Anonymizer" separator=";">
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
  </input>

  <input file="base_anonymizerLine.csv" type="com.axelor.apps.base.db.AnonymizerLine"
    separator=";">
    <bind to="metaModel" column="metaModel" search="self.name = :metaModel"
      check="com.axelor.utils.helpers.ImportHelper.isRecordPresent('com.axelor.meta.db.MetaModel', 'name', metaModel)"
      check-message="Meta model doesn't exist"/>
    <bind to="metaField" column="metaField"
      search="self.name = :metaField AND self.metaModel.name = :metaModel"
      check="com.axelor.utils.helpers.ImportHelper.isRecordPresent('com.axelor.meta.db.MetaField', 'name, metaModel.name', metaField, metaModel)"
      check-message="Meta field doesn't exist"/>
    <bind to="anonymizer" column="anonymizer_importId"
      search="self.importId = :anonymizer_importId"/>
    <bind to="useFakeData" column="useFakeData"/>
  </input>

  <input file="base_alternativeBarcodeType.csv" separator=";"
    type="com.axelor.apps.base.db.AlternativeBarcodeType" search="self.importId = :importId">
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
  </input>

  <input file="base_blocking.csv" separator=";" type="com.axelor.apps.base.db.Blocking"
    search="self.importId = :importId">
    <bind to="blockingToDate"
      eval="call:com.axelor.csv.script.ImportDateTime:importDate(blockingToDate)"
      column="blockingToDate"/>
  </input>

</csv-inputs>
