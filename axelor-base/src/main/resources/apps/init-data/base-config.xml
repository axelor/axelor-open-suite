<?xml version="1.0" encoding="UTF-8"?>
<csv-inputs xmlns="http://axelor.com/xml/ns/data-import"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://axelor.com/xml/ns/data-import http://axelor.com/xml/ns/data-import/data-import_7.4.xsd">

  <input file="base_sequence.csv" separator=";" type="com.axelor.apps.base.db.Sequence"
    search="self.importId = :importId" call="com.axelor.csv.script.ImportSequence:importSequence">
    <bind column="codeSelect" to="codeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.base.db.Sequence', 'codeSelect', codeSelect)"
      check-message="Invalid codeSelect :codeSelect"/>
    <bind column="name" to="name"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="sequenceTypeSelect" to="sequenceTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(sequenceTypeSelect)"
      check-message="Sequence type must not be null"/>
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Company', 'importId', company_importId)"
      check-message="Company with importId :company_importId doesn't exist"/>
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Sequence','importId', importId, 'company.importId, codeSelect, prefixe, suffixe', company_importId, codeSelect, prefixe, suffixe)"
      check-message="Company, code, prefixe and suffixe must be unique"/>
    <bind to="yearlyResetOk" column="yearlyResetOk" eval="yearlyResetOk == '1' ? true : false"
      if="yearlyResetOk"/>
    <bind to="nextNum" column="nextNum" eval="nextNum?.empty ? '1' : nextNum"/>
    <bind to="padding" column="padding" eval="padding?.empty ? '1' : padding"/>
    <bind to="toBeAdded" column="toBeAdded" eval="toBeAdded?.empty ? '1' : toBeAdded"/>
    <bind to="resetDate"
      eval="call:com.axelor.apps.base.service.app.AppBaseService:getTodayDate(null)"/>
  </input>

  <input file="studio_appBase.csv" separator=";" type="com.axelor.studio.db.AppBase"
    search="self.app.code = :code">
    <bind column="mapApiSelect" to="mapApiSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.studio.db.AppBase', 'mapApiSelect', mapApiSelect)"
      check-message="Invalid mapApiSelect :mapApiSelect"/>
    <bind column="currencyWsURL" to="currencyWsURL"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.studio.db.AppBase', 'currencyWsURL', currencyWsURL)"
      check-message="Invalid currencyWsURL :currencyWsURL"/>
    <bind column="productInAtiSelect" to="productInAtiSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.studio.db.AppBase', 'productInAtiSelect', productInAtiSelect)"
      check-message="Invalid productInAtiSelect :productInAtiSelect"/>
    <bind column="regroupProductsTypeSelect" to="regroupProductsTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.studio.db.AppBase', 'regroupProductsTypeSelect', regroupProductsTypeSelect)"
      check-message="Invalid regroupProductsTypeSelect :regroupProductsTypeSelect"/>
    <bind column="regroupProductsLevelSelect" to="regroupProductsLevelSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.studio.db.AppBase', 'regroupProductsLevelSelect', regroupProductsLevelSelect)"
      check-message="Invalid regroupProductsLevelSelect :regroupProductsLevelSelect"/>
    <bind column="computeMethodDiscountSelect" to="computeMethodDiscountSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.studio.db.AppBase', 'computeMethodDiscountSelect', computeMethodDiscountSelect)"
      check-message="Invalid computeMethodDiscountSelect :computeMethodDiscountSelect"/>
    <bind column="timeLoggingPreferenceSelect" to="timeLoggingPreferenceSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.studio.db.AppBase', 'timeLoggingPreferenceSelect', timeLoggingPreferenceSelect)"
      check-message="Invalid timeLoggingPreferenceSelect :timeLoggingPreferenceSelect"/>
    <bind column="productSequenceTypeSelect" to="productSequenceTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.studio.db.AppBase', 'productSequenceTypeSelect', productSequenceTypeSelect)"
      check-message="Invalid productSequenceTypeSelect :productSequenceTypeSelect"/>
    <bind column="shortcutMultiSelect" to="shortcutMultiSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.studio.db.AppBase', 'shortcutMultiSelect', shortcutMultiSelect)"
      check-message="Invalid shortcutMultiSelect :shortcutMultiSelect"/>
    <bind to="app" column="code" search="self.code = :code"/>
  </input>

  <input file="base_fakerApiField.csv" type="com.axelor.apps.base.db.FakerApiField"
    search="self.importId = :importId" update="false">
    <bind column="className" to="className"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(className)"
      check-message="Class name must not be null"/>
    <bind column="methodName" to="methodName"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(methodName)"
      check-message="Method name must not be null"/>
    <bind column="dataType" to="dataType"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.base.db.FakerApiField', 'dataType', dataType)"
      check-message="Invalid dataType :dataType"/>
  </input>

  <input file="base_fakerApiFieldParameters.csv"
    type="com.axelor.apps.base.db.FakerApiFieldParameters">
    <bind column="paramType" to="paramType"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.base.db.FakerApiFieldParameters', 'paramType', paramType)"
      check-message="Invalid paramType :paramType"/>
  </input>

  <input file="base_icpe.csv" type="com.axelor.apps.base.db.Icpe" separator=";"/>

  <input file="base_hazard_pictogram.csv" type="com.axelor.apps.base.db.HazardPictogram"
    separator=";" call="com.axelor.csv.script.ImportHazardPictogram:importPictogram"/>

  <input file="base_hazard_phrase.csv" type="com.axelor.apps.base.db.HazardPhrase"
    separator=";"/>
</csv-inputs>