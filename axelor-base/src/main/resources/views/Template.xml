<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<object-views xmlns="http://axelor.com/xml/ns/object-views"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://axelor.com/xml/ns/object-views http://axelor.com/xml/ns/object-views/object-views_6.1.xsd">

  <grid name="template-grid" id="template-grid-base" title="Templates"
    model="com.axelor.message.db.Template">
    <field name="name"/>
    <field name="subject"/>
    <field name="metaModel" form-view="meta-model-form" grid-view="meta-model-grid"/>
    <field name="mediaTypeSelect"/>
  </grid>

  <form id="template-form-base" name="template-form" title="Template"
    model="com.axelor.message.db.Template" onSave="action-template-check-receptor"
    onNew="action-template-record-new">
    <toolbar>
      <button name="testTemplateBtn" title="Test template"
        onClick="save,action-template-view-test-template" readonlyIf="metaModel == null"/>
    </toolbar>
    <panel name="mainPanel" colSpan="12">
      <field name="name" showTitle="false" colSpan="12">
        <viewer depends="name"><![CDATA[
					<>
						<h3>
							<span>{name}</span>
						</h3>
					</>
				]]></viewer>
        <editor>
          <field name="name" showTitle="true"/>
        </editor>
      </field>
      <field name="mediaTypeSelect"/>
      <field name="language" canEdit="false" form-view="language-form"
        grid-view="language-grid"/>
      <field name="templateEngineSelect"/>
      <field name="isJson" onChange="action-template-record-is-json-change"/>
      <panel itemSpan="12">
        <field name="metaModel" hideIf="isJson" canEdit="false" form-view="meta-model-form"
          grid-view="meta-model-grid"/>
        <field name="metaJsonModel" showIf="isJson" canEdit="false"
          form-view="json-model-form" grid-view="json-model-grid"/>
      </panel>
      <field name="target" hidden="true"/>
      <field name="templateContext" canEdit="false" form-view="template-context-form"
        grid-view="template-context-grid" hidden="true"/>
    </panel>
    <panel-tabs name="mainPanelTab">
      <panel name="contentPanel" title="Contenu">
        <panel name="recipientAddressPanel" title="Recipient address"
          showIf="mediaTypeSelect == 1">
          <field name="addressBlock" showTitle="false" colSpan="12" height="5" widget="html"
            x-lite="false"/>
        </panel>
        <panel name="senderPanel" title="Sender" colSpan="12"
          showIf="mediaTypeSelect == 2 || mediaTypeSelect == 4">
          <field name="replyToRecipients" height="2"/>
        </panel>
        <panel name="recipientsPanel" title="Recipients"
          showIf="mediaTypeSelect == 2 || mediaTypeSelect == 4" colSpan="12">
          <field name="toRecipients" colSpan="12" height="2"
            help="Please use ',' ';' or '|' as separator between two email addresses."/>
          <field name="ccRecipients" colSpan="12" height="2"
            help="Please use ',' ';' or '|' as separator between two email addresses."/>
          <field name="bccRecipients" colSpan="12" height="2"
            help="Please use ',' ';' or '|' as separator between two email addresses."/>
        </panel>
        <panel name="subjectContentPanel" title="Content" colSpan="12">
          <field name="subject" colSpan="12" height="2"/>
          <field name="content" showTitle="false" colSpan="12" widget="html"
            showIf="mediaTypeSelect != 5"/>
          <field name="content" colSpan="12" showTitle="false" widget="html" x-lite="true"
            showIf="mediaTypeSelect == 5"/>
        </panel>
        <panel name="signature-panel" title="Signature" showIf="mediaTypeSelect != 3"
          colSpan="12">
          <field name="addSignature" widget="inline-checkbox" colSpan="3"/>
          <field name="signature" colSpan="9" showIf="addSignature"
            help="If you leave this field empty or fill it with an incorrect formula, the default email account's signature will be used.\nExamples of a correct formulas:\n$__user__.emailSignature$\n$first(__user__.emailAccountList).signature$"/>
        </panel>
        <panel-related name="templateContextPanel" field="templateContextList"
          colSpan="12"/>
        <panel name="attachedFilesPanel" title="Attached files" colSpan="12">
          <field name="birtTemplateSet" colSpan="12" widget="TagSelect" canEdit="false"
            form-view="birt-template-form" grid-view="birt-template-grid"/>
        </panel>
      </panel>
      <panel title="Configuration" name="configurationPanel">
        <field name="isDefault" widget="boolean-switch"/>
        <field name="isSystem" widget="boolean-switch"/>
      </panel>
      <panel name="stringHelpPanel" title="String Template Help"
        showIf="templateEngineSelect == 1">
        <field name="$stringHelpViewer" showTitle="false" readonly="true" colSpan="12">
          <viewer><![CDATA[
			<>
				<h3><span>{_t('Access to model fields')}</span></h3>
				<p>
					<span>{_t('We can access direct/o2o/m2o fields of template model by specifying field path surrounded by')}</span> <Box border borderColor="dark-subtle" color="red" borderWidth={1} as="code" bg="secondary-subtle" p={1}>$$</Box><Box/>
					<span>{_t('Examples')}</span>:
					<ul>
						<li> <span>{_t('To access product\'s full name')}</span>: <Box border borderColor="dark-subtle" color="red" borderWidth={1} as="code" bg="secondary-subtle" p={1}>$Product.fullName$</Box> </li>
						<li> <span>{_t('To access product\'s ProductCategory')}</span>: <Box border borderColor="dark-subtle" color="red" borderWidth={1} as="code" bg="secondary-subtle" p={1}>$Product.productCategory.name$</Box> </li>
					</ul>
				</p>
				<p>
					<span>{_t('We can access o2m/m2m fields of template model with this syntax')}</span> <Box border borderColor="dark-subtle" color="red" borderWidth={1} as="code" bg="secondary-subtle" p={1}>$Model.fieldName:&#123;it|$it.fieldPath$&#125;$</Box><Box/>
					<span>{_t('Examples')}</span>:
					<ul>
						<li> <span>{_t('To access company name of productCompanyList')}</span>: <Box border borderColor="dark-subtle" color="red" borderWidth={1} as="code" bg="secondary-subtle" p={1}>$Product.productCompanyList:&#123;it|$it.company.name$&#125;$</Box> </li>
						<li> <span>{_t('To access trading name of tradingNameSellerSet of product')}</span>: <Box border borderColor="dark-subtle" color="red" borderWidth={1} as="code" bg="secondary-subtle" p={1}>$Product.tradingNameSellerSet:&#123;it|$it.name$&#125;$</Box> </li>
					</ul>
				</p>
				<h4><span>{_t('Selection')}</span></h4>
				<p>
					<span>{_t('We can access selection fields as follows')}</span>:<Box/>
					<span>{_t('Examples')}</span>:
					<ul>
						<li> <span>{_t('To display title of costTypeSelect of product')}</span>: <Box border borderColor="dark-subtle" color="red" borderWidth={1} as="code" bg="secondary-subtle" p={1}>$Product.costTypeSelect$</Box>  <span>{_t('or')}</span>  <Box border borderColor="dark-subtle" color="red" borderWidth={1} as="code" bg="secondary-subtle" p={1}>$Product.costTypeSelect.title$</Box> </li>
						<li> <span>{_t('To display value of productTypeSelect of product')}</span>: <Box border borderColor="dark-subtle" color="red" borderWidth={1} as="code" bg="secondary-subtle" p={1}>$Product.productTypeSelect.value$</Box> </li>
					</ul>
				</p>
				<h4><span>{_t('Custom fields')}</span></h4>
				<p>
					<span>{_t('We can access custom fields same as normal fields')}</span>:<Box/>
					<span>{_t('Examples')}</span>:
					<span>{_t('To display value of custom field of product')}</span>: <Box border borderColor="dark-subtle" color="red" borderWidth={1} as="code" bg="secondary-subtle" p={1}>$Product.customFieldName$</Box>
				</p>
			</>
			]]>
          </viewer>
        </field>
      </panel>
      <panel name="groovyHelpPanel" title="Groovy Template Help"
        showIf="templateEngineSelect == 2">
        <field name="$groovyHelpViewer" showTitle="false" readonly="true" colSpan="12">
          <viewer><![CDATA[
			<>
				<h3><Box as="a" href={"http://docs.groovy-lang.org/latest/html/documentation/"} target="_blank">Groovy</Box></h3>
				<h4>{_t('String')}</h4>
				<p>
					<Box border borderColor="dark-subtle" color="red" borderWidth={1} as="code" bg="secondary-subtle" p={1}>+</Box> <span>{_t('is used for concatenation')}</span>:
				</p>
				<Box border borderColor="dark-subtle" color="black" borderWidth={1} as="pre" bg="secondary-subtle" p={2}>
					{`v = "def" \n"abc" + v //returns "abcdef"`}
				</Box>
				<p>
					<span>{_t('String interpolation can also be used')}</span>:
				</p>
				<Box border borderColor="dark-subtle" color="black" borderWidth={1} as="pre" bg="secondary-subtle" p={2}>
					{`v = "def" \n"abc\${v}" // also returns "abcdef"`}
				</Box>
				<h4>{_t('Decimal')}</h4>
				<p>
					<span>{_t('Standard operation like +, -, *, / can be used and will work correctly with BigDecimal.')}</span>
				</p>
				<h4>{_t('Current User')}</h4>
				<p>
					<Box border borderColor="dark-subtle" color="red" borderWidth={1} as="code" bg="secondary-subtle" p={1}>__user__</Box> <span>{_t('gives access to connected user.')}</span><Box/>
					<span>{_t('Example: accessing the name of the user')}</span>: <Box border borderColor="dark-subtle" color="red" borderWidth={1} as="code" bg="secondary-subtle" p={1}>__user__.name</Box>.
				</p>
				<h4>{_t('Date')}</h4>
				<p>
					<Box border borderColor="dark-subtle" color="red" borderWidth={1} as="code" bg="secondary-subtle" p={1}>__date__</Box> <span>{_t('gives access to today date and')}</span> <Box border borderColor="dark-subtle" color="red" borderWidth={1} as="code" bg="secondary-subtle" p={1}>__datetime__</Box> <span>{_t('to current date time.')}</span>
				</p>
				<h4><span>{_t('Query to database')}</span></h4>
				<p>
					<Box border borderColor="dark-subtle" color="red" borderWidth={1} as="code" bg="secondary-subtle" p={1}>__repo__</Box> <span>{_t('gives access to a repository with the same syntax as the repositories in java')}</span>.<Box/>
					<span>{_t('Examples')}</span>:
					<ul>
						<li>{_t('searching for Product with id = 1:')} <Box border borderColor="dark-subtle" color="red" borderWidth={1} as="code" bg="secondary-subtle" p={1}>__repo__(Product).find(1)</Box> </li>
						<li>{_t('searching for ProductFamily with the code ‘SERV’')}: <Box border borderColor="dark-subtle" color="red" borderWidth={1} as="code" bg="secondary-subtle" p={1}>__repo__(ProductFamily).all().filter("self.code = 'SERV'").fetchOne()</Box> </li>
						<li>{_t('searching Partners that are suppliers and with a name starting with “A”')}: <Box border borderColor="dark-subtle" color="red" borderWidth={1} as="code" bg="secondary-subtle" p={1}>__repo__(Partner).all().filter("self.isSupplier IS TRUE AND self.name LIKE 'A%'").fetchOne()</Box> </li>
					</ul>
				</p>
			</>
			]]>
          </viewer>
        </field>
      </panel>
    </panel-tabs>
  </form>

  <action-method name="action-template-check-receptor">
    <call class="com.axelor.apps.base.web.TemplateController" method="checkTargetReceptor"/>
  </action-method>

</object-views>
