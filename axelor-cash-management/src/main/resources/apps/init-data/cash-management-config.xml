<?xml version="1.0" encoding="UTF-8"?>
<csv-inputs xmlns="http://axelor.com/xml/ns/data-import"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://axelor.com/xml/ns/data-import http://axelor.com/xml/ns/data-import/data-import_7.4.xsd">

  <input file="cash_management_forecastRecapLineType.csv" separator=";"
    type="com.axelor.apps.cash.management.db.ForecastRecapLineType"
    search="self.importId = :importId">
    <bind column="elementSelect" to="elementSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('forecast.recap.line.type.element.select', elementSelect, false)"
      check-message="Invalid elementSelect :elementSelect"/>
    <bind column="typeSelect" to="typeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('iaccount.payment.mode.in.out.select', typeSelect, false)"
      check-message="Invalid typeSelect :typeSelect"/>
    <bind column="operationTypeSelect" to="operationTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('iinvoice.operation.type.select', operationTypeSelect, false)"
      check-message="Invalid operationTypeSelect :operationTypeSelect"/>
    <bind column="payDaySelect" to="payDaySelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('forecast.recap.line.type.pay.day.select', payDaySelect, false)"
      check-message="Invalid payDaySelect :payDaySelect"/>
    <bind column="functionalOriginSelect" to="functionalOriginSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('sequence.generic.code.select', functionalOriginSelect, false)"
      check-message="Invalid functionalOriginSelect :functionalOriginSelect"/>
  </input>

  <input file="base_sequence.csv" separator=";" type="com.axelor.apps.base.db.Sequence"
    search="self.importId = :importId" call="com.axelor.csv.script.ImportSequence:importSequence">
    <bind column="codeSelect" to="codeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('sequence.generic.code.select', codeSelect, true)"
      check-message="Invalid codeSelect :codeSelect"/>
    <bind column="name" to="name"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="sequenceTypeSelect" to="sequenceTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(sequenceTypeSelect)"
      check-message="Sequence type must not be null"/>
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Sequence', 'importId', importId, 'company.importId, codeSelect, prefixe, suffixe', company_importId, codeSelect, prefixe, suffixe)"
      check-message="Company, code, prefixe and suffixe must be unique"/>
    <bind to="yearlyResetOk" column="yearlyResetOk" eval="yearlyResetOk == '1' ? true : false"/>
    <bind to="nextNum" column="nextNum" eval="nextNum?.empty ? '1' : nextNum"/>
    <bind to="padding" column="padding" eval="padding?.empty ? '1' : padding"/>
    <bind to="toBeAdded" column="toBeAdded" eval="toBeAdded?.empty ? '1' : toBeAdded"/>
    <bind to="resetDate"
      eval="call:com.axelor.apps.base.service.app.AppBaseService:getTodayDate(null)"/>
  </input>

</csv-inputs>