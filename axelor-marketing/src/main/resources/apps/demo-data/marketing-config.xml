<?xml version="1.0" encoding="UTF-8"?>
<csv-inputs xmlns="http://axelor.com/xml/ns/data-import"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://axelor.com/xml/ns/data-import http://axelor.com/xml/ns/data-import/data-import_7.4.xsd">

  <input file="marketing_targetList.csv" separator=";"
    type="com.axelor.apps.marketing.db.TargetList" search="self.importId = :importId">
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="partnerTypeSelect" to="partnerTypeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.marketing.db.TargetList', 'partnerTypeSelect', partnerTypeSelect)"
      check-message="Invalid partnerTypeSelect"/>
    <bind column="partnerQueryTypeSelect" to="partnerQueryTypeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.marketing.db.TargetList', 'partnerQueryTypeSelect', partnerQueryTypeSelect)"
      check-message="Invalid partnerQueryTypeSelect"/>
    <bind column="leadQueryTypeSelect" to="leadQueryTypeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.marketing.db.TargetList', 'leadQueryTypeSelect', leadQueryTypeSelect)"
      check-message="Invalid leadQueryTypeSelect"/>
  </input>

  <input file="message_template.csv" separator=";" type="com.axelor.message.db.Template">
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="mediaTypeSelect" to="mediaTypeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.message.db.Template', 'mediaTypeSelect', mediaTypeSelect)"
      check-message="Invalid mediaTypeSelect"/>
    <bind column="templateEngineSelect" to="templateEngineSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.message.db.Template', 'templateEngineSelect', templateEngineSelect)"
      check-message="Invalid templateEngineSelect"/>
    <bind column="language" to="language"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.message.db.Template', 'language', language)"
      check-message="Invalid language"/>
  </input>

  <input file="marketing_campaignType.csv" separator=";"
    type="com.axelor.apps.marketing.db.CampaignType" search="self.importId = :importId">
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
  </input>

  <input file="marketing_campaign.csv" separator=";"
    type="com.axelor.apps.marketing.db.Campaign" search="self.importId = :importId">
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="stageSelect" to="stageSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.marketing.db.Campaign', 'stageSelect', stageSelect)"
      check-message="Invalid stageSelect"/>
    <bind column="eventTypeSelect" to="eventTypeSelect"
      check="com.axelor.utils.helpers.ImportHelper.checkSelection('com.axelor.apps.marketing.db.Campaign', 'eventTypeSelect', eventTypeSelect)"
      check-message="Invalid eventTypeSelect"/>
  </input>

  <input file="marketing_anonymizer.csv" type="com.axelor.apps.base.db.Anonymizer"
    separator=";">
    <bind column="name" to="name"
      check="com.axelor.utils.helpers.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
  </input>

  <input file="marketing_anonymizerLine.csv" type="com.axelor.apps.base.db.AnonymizerLine"
    separator=";">
    <bind to="metaModel" column="metaModel" search="self.name = :metaModel"
      check="com.axelor.utils.helpers.ImportHelper.isRecordPresent('com.axelor.meta.db.MetaModel', 'name', metaModel)"
      check-message="Meta model doesn't exist"/>
    <bind to="metaField" column="metaField"
      search="self.name = :metaField AND self.metaModel.name = :metaModel"
      check="com.axelor.utils.helpers.ImportHelper.isRecordPresent('com.axelor.meta.db.MetaField', 'name, metaModel.name', metaField, metaModel)"
      check-message="Meta field doesn't exist"/>
    <bind to="anonymizer" column="anonymizer_importId"
      search="self.importId = :anonymizer_importId"/>
    <bind to="useFakeData" column="useFakeData"/>
  </input>

</csv-inputs>
