<?xml version="1.0" encoding="UTF-8"?>
<csv-inputs xmlns="http://axelor.com/xml/ns/data-import"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://axelor.com/xml/ns/data-import http://axelor.com/xml/ns/data-import/data-import_7.4.xsd">

  <input file="app_project.csv" type="com.axelor.studio.db.AppProject"
    search="self.id is not null" separator=";" update="true">
    <bind to="completedPaidProjectStatus" column="completedPaidProjectStatus_importId"
      search="self.importId = :completedPaidProjectStatus_importId"/>
  </input>

  <input file="studio_appBusinessProject.csv" separator=";"
    type="com.axelor.studio.db.AppBusinessProject" search="self.app.code = :code" update="true">
    <bind column="closingProjectRuleSelect" to="closingProjectRuleSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('business.project.app.closing.project.rule.select', closingProjectRuleSelect, false)"
      check-message="Invalid closingProjectRuleSelect :closingProjectRuleSelect"/>
    <bind column="groupingPeriodSelect" to="groupingPeriodSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('business.project.invoice.grouping.period.select', groupingPeriodSelect, false)"
      check-message="Invalid groupingPeriodSelect :groupingPeriodSelect"/>
    <bind to="preTaskStatusSet" column="preTaskStatusSetImportId"
      search="self.importId in :preTaskStatusSetImportId"
      eval="preTaskStatusSetImportId.split('\\|') as List"/>
    <bind to="postTaskStatusSet" column="postTaskStatusSetImportId"
      search="self.importId in :postTaskStatusSetImportId"
      eval="postTaskStatusSetImportId.split('\\|') as List"/>
  </input>

  <input file="account_accountConfig.csv" separator=";"
    type="com.axelor.apps.account.db.AccountConfig" search="self.importId = :importId" update="true">
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Company', 'importId', company_importId)"
      check-message="Company with importId :company_importId doesn't exist"/>
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.account.db.AccountConfig', 'importId', importId, 'company.importId', company_importId)"
      check-message="Company must be unique"/>
    <bind column="accountCodeNbrCharSelect" to="accountCodeNbrCharSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('account.account.chart.code.nbr.char.select', accountCodeNbrCharSelect, false)"
      check-message="Invalid accountCodeNbrCharSelect :accountCodeNbrCharSelect"/>
    <bind column="partnerAccountGenerationModeSelect" to="partnerAccountGenerationModeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('account.create.mode.select', partnerAccountGenerationModeSelect, false)"
      check-message="Invalid partnerAccountGenerationModeSelect :partnerAccountGenerationModeSelect"/>
    <bind column="invoiceInAtiSelect" to="invoiceInAtiSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('base.in.ati.select', invoiceInAtiSelect, false)"
      check-message="Invalid invoiceInAtiSelect :invoiceInAtiSelect"/>
    <bind column="nbrOfAnalyticAxisSelect" to="nbrOfAnalyticAxisSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('account.general.analytic.axis.type.select', nbrOfAnalyticAxisSelect, false)"
      check-message="Invalid nbrOfAnalyticAxisSelect :nbrOfAnalyticAxisSelect"/>
    <bind column="analyticDistributionTypeSelect" to="analyticDistributionTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('account.general.analytic.distribution.type.select', analyticDistributionTypeSelect, false)"
      check-message="Invalid analyticDistributionTypeSelect :analyticDistributionTypeSelect"/>
  </input>

  <input file="base_sequence.csv" separator=";" type="com.axelor.apps.base.db.Sequence"
    search="self.importId = :importId" call="com.axelor.csv.script.SequenceScript:computeFullname">
    <bind column="codeSelect" to="codeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('sequence.generic.code.select', codeSelect, true)"
      check-message="Invalid codeSelect :codeSelect"/>
    <bind column="name" to="name"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="sequenceTypeSelect" to="sequenceTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(sequenceTypeSelect)"
      check-message="Sequence type must not be null"/>
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Sequence', 'importId', importId, 'company.importId, codeSelect, prefixe, suffixe', company_importId, codeSelect, prefixe, suffixe)"
      check-message="Company, code, prefixe and suffixe must be unique"/>
    <bind to="yearlyResetOk" column="yearlyResetOk" eval="yearlyResetOk == '1' ? true : false"/>
    <bind to="nextNum" column="nextNum" eval="nextNum?.empty ? '1' : nextNum"/>
    <bind to="padding" column="padding" eval="padding?.empty ? '1' : padding"/>
    <bind to="toBeAdded" column="toBeAdded" eval="toBeAdded?.empty ? '1' : toBeAdded"/>
    <bind to="resetDate"
      eval="call:com.axelor.apps.base.service.app.AppBaseService:getTodayDate(null)"/>
  </input>

  <input file="project_taskTemplate.csv" separator=";" search="self.importId = :importId"
    type="com.axelor.apps.project.db.TaskTemplate"/>

  <input file="base_product.csv" separator=";" search="self.importId = :importId"
    type="com.axelor.apps.base.db.Product">
    <bind column="code" to="code"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Product', 'importId', importId, 'code', code)"
      check-message="Code must be unique"/>
    <bind column="serialNumber" to="serialNumber"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Product', 'importId', importId, 'serialNumber', serialNumber)"
      check-message="Serial number must be unique"/>
    <bind column="saleSupplySelect" to="saleSupplySelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('product.sale.supply.select', saleSupplySelect, false)"
      check-message="Invalid saleSupplySelect :saleSupplySelect"/>
    <bind column="productTypeSelect" to="productTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('product.product.type.select', productTypeSelect, false)"
      check-message="Invalid productTypeSelect :productTypeSelect"/>
    <bind column="procurementMethodSelect" to="procurementMethodSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('product.procurement.method.select', procurementMethodSelect, false)"
      check-message="Invalid procurementMethodSelect :procurementMethodSelect"/>
    <bind column="productSubTypeSelect" to="productSubTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('product.sub.type.product.select', productSubTypeSelect, false)"
      check-message="Invalid productSubTypeSelect :productSubTypeSelect"/>
    <bind column="inventoryTypeSelect" to="inventoryTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('product.inventory.type.select', inventoryTypeSelect, false)"
      check-message="Invalid inventoryTypeSelect :inventoryTypeSelect"/>
    <bind column="versionSelect" to="versionSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('base.product.version.select', versionSelect, false)"
      check-message="Invalid versionSelect :versionSelect"/>
    <bind column="costTypeSelect" to="costTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('base.product.cost.type.select', costTypeSelect, false)"
      check-message="Invalid costTypeSelect :costTypeSelect"/>
    <bind to="taskTemplateSet" column="taskTemplateSet_importId"
      search="self.importId in :taskTemplateSet_importId"
      eval="taskTemplateSet_importId.split('\\|') as List"/>
  </input>

  <input file="sale_saleOrder.csv" separator=";" search="self.importId = :importId"
    type="com.axelor.apps.sale.db.SaleOrder">
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Company', 'importId', company_importId)"
      check-message="Company with importId :company_importId doesn't exist"/>
    <bind column="saleOrderTypeSelect" to="saleOrderTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('supplychain.sale.order.type.select', saleOrderTypeSelect, true)"
      check-message="Invalid saleOrderTypeSelect :saleOrderTypeSelect"/>
    <bind column="statusSelect" to="statusSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('sale.order.status.select', saleOrderTypeSelect, false)"
      check-message="Invalid statusSelect :statusSelect"/>
    <bind column="discountTypeSelect" to="discountTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('base.price.list.line.amount.type.select', discountTypeSelect, false)"
      check-message="Invalid discountTypeSelect :discountTypeSelect"/>
    <bind column="periodicityTypeSelect" to="periodicityTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('sale.subscription.periodicity.type.select', periodicityTypeSelect, false)"
      check-message="Invalid periodicityTypeSelect :periodicityTypeSelect"/>
    <bind column="deliveryState" to="deliveryState"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('sale.order.delivery.state', deliveryState, false)"
      check-message="Invalid deliveryState :deliveryState"/>
    <bind column="invoicingState" to="invoicingState"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('supplychain.sale.order.invoicing.state.select', invoicingState, false)"
      check-message="Invalid invoicingState :invoicingState"/>
    <bind column="saleOrderSeq" to="saleOrderSeq"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.sale.db.SaleOrder', 'importId', importId, 'saleOrderSeq, company.importId', saleOrderSeq, company_importId)"
      check-message="Sale order seq and company must be unique"/>
    <bind to="creationDate"
      eval="call:com.axelor.csv.script.ImportDateTime:importDate(creationDate)"
      column="creationDate"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(creationDate)"
      check-message="Creation date must not be null"/>
    <bind to="confirmationDateTime"
      eval="call:com.axelor.csv.script.ImportDateTime:importDateTime(confirmationDateTime)"
      column="confirmationDateTime"/>
    <bind to="shipmentDate"
      eval="call:com.axelor.csv.script.ImportDateTime:importDate(shipmentDate)"
      column="shipmentDate"/>
  </input>

  <input file="sale_saleOrderLine.csv" separator=";"
    type="com.axelor.apps.sale.db.SaleOrderLine" search="self.importId = :importId"
    call="com.axelor.csv.script.ImportSaleOrderLine:importSaleOrderLine">
    <bind column="productName" to="productName"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(productName)"
      check-message="Displayed product name must not be null"/>
    <bind column="discountTypeSelect" to="discountTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('base.price.list.line.amount.type.select', discountTypeSelect, false)"
      check-message="Invalid discountTypeSelect :discountTypeSelect"/>
    <bind column="typeSelect" to="typeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('line.type.select', typeSelect, false)"
      check-message="Invalid typeSelect :typeSelect"/>
    <bind column="productTypeIconSelect" to="productTypeIconSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('sale.sale.order.line.product.sub.type.icon.select', productTypeIconSelect, false)"
      check-message="Invalid productTypeIconSelect :productTypeIconSelect"/>
    <bind column="saleSupplySelect" to="saleSupplySelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('product.sale.supply.select', saleSupplySelect, false)"
      check-message="Invalid saleSupplySelect :saleSupplySelect"/>
    <bind column="availableStatusSelect" to="availableStatusSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('supplychain.sale.order.line.available.status.select', availableStatusSelect, false)"
      check-message="Invalid availableStatusSelect :availableStatusSelect"/>
    <bind column="deliveryState" to="deliveryState"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('sale.order.delivery.state', deliveryState, false)"
      check-message="Invalid deliveryState :deliveryState"/>
    <bind column="invoicingState" to="invoicingState"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('supplychain.sale.order.invoicing.state.select', invoicingState, false)"
      check-message="Invalid invoicingState :invoicingState"/>
    <bind column="invoicingModeSelect" to="invoicingModeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('business.project.sale.order.line.invoicing.mode.select', invoicingModeSelect, false)"
      check-message="Invalid invoicingModeSelect :invoicingModeSelect"/>
    <bind to="priceDiscounted" eval="price"/>
  </input>

  <input file="sale_saleOrder.csv" separator=";" search="self.importId = :importId"
    type="com.axelor.apps.sale.db.SaleOrder"
    call="com.axelor.csv.script.ImportSaleOrder:importSaleOrder">
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Company', 'importId', company_importId)"
      check-message="Company with importId :company_importId doesn't exist"/>
    <bind column="saleOrderTypeSelect" to="saleOrderTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('supplychain.sale.order.type.select', saleOrderTypeSelect, true)"
      check-message="Invalid saleOrderTypeSelect :saleOrderTypeSelect"/>
    <bind column="statusSelect" to="statusSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('sale.order.status.select', saleOrderTypeSelect, false)"
      check-message="Invalid statusSelect :statusSelect"/>
    <bind column="discountTypeSelect" to="discountTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('base.price.list.line.amount.type.select', discountTypeSelect, false)"
      check-message="Invalid discountTypeSelect :discountTypeSelect"/>
    <bind column="periodicityTypeSelect" to="periodicityTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('sale.subscription.periodicity.type.select', periodicityTypeSelect, false)"
      check-message="Invalid periodicityTypeSelect :periodicityTypeSelect"/>
    <bind column="deliveryState" to="deliveryState"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('sale.order.delivery.state', deliveryState, false)"
      check-message="Invalid deliveryState :deliveryState"/>
    <bind column="invoicingState" to="invoicingState"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('supplychain.sale.order.invoicing.state.select', invoicingState, false)"
      check-message="Invalid invoicingState :invoicingState"/>
    <bind column="saleOrderSeq" to="saleOrderSeq"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.sale.db.SaleOrder', 'importId', importId, 'saleOrderSeq, company.importId', saleOrderSeq, company_importId)"
      check-message="Sale order seq and company must be unique"/>
    <bind to="creationDate"
      eval="call:com.axelor.csv.script.ImportDateTime:importDate(creationDate)"
      column="creationDate"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(creationDate)"
      check-message="Creation date must not be null"/>
    <bind to="confirmationDateTime"
      eval="call:com.axelor.csv.script.ImportDateTime:importDateTime(confirmationDateTime)"
      column="confirmationDateTime"/>
    <bind to="shipmentDate"
      eval="call:com.axelor.csv.script.ImportDateTime:importDate(shipmentDate)"
      column="shipmentDate"/>
  </input>

  <input file="sale_saleOrder.csv" separator=";" search="self.importId = :importId"
    type="com.axelor.apps.sale.db.SaleOrder"
    call="com.axelor.csv.script.FinalizeAndConfirmSaleOrder:finalizeAndConfirmSaleOrder">
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Company', 'importId', company_importId)"
      check-message="Company with importId :company_importId doesn't exist"/>
    <bind column="saleOrderTypeSelect" to="saleOrderTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('supplychain.sale.order.type.select', saleOrderTypeSelect, true)"
      check-message="Invalid saleOrderTypeSelect :saleOrderTypeSelect"/>
    <bind column="statusSelect" to="statusSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('sale.order.status.select', saleOrderTypeSelect, false)"
      check-message="Invalid statusSelect :statusSelect"/>
    <bind column="discountTypeSelect" to="discountTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('base.price.list.line.amount.type.select', discountTypeSelect, false)"
      check-message="Invalid discountTypeSelect :discountTypeSelect"/>
    <bind column="periodicityTypeSelect" to="periodicityTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('sale.subscription.periodicity.type.select', periodicityTypeSelect, false)"
      check-message="Invalid periodicityTypeSelect :periodicityTypeSelect"/>
    <bind column="deliveryState" to="deliveryState"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('sale.order.delivery.state', deliveryState, false)"
      check-message="Invalid deliveryState :deliveryState"/>
    <bind column="invoicingState" to="invoicingState"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('supplychain.sale.order.invoicing.state.select', invoicingState, false)"
      check-message="Invalid invoicingState :invoicingState"/>
    <bind column="saleOrderSeq" to="saleOrderSeq"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.sale.db.SaleOrder', 'importId', importId, 'saleOrderSeq, company.importId', saleOrderSeq, company_importId)"
      check-message="Sale order seq and company must be unique"/>
    <bind to="creationDate"
      eval="call:com.axelor.csv.script.ImportDateTime:importDate(creationDate)"
      column="creationDate"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(creationDate)"
      check-message="Creation date must not be null"/>
    <bind to="confirmationDateTime"
      eval="call:com.axelor.csv.script.ImportDateTime:importDateTime(confirmationDateTime)"
      column="confirmationDateTime"/>
    <bind to="shipmentDate"
      eval="call:com.axelor.csv.script.ImportDateTime:importDate(shipmentDate)"
      column="shipmentDate"/>
  </input>

  <input file="sale_saleOrder.csv" separator=";" search="self.importId = :importId"
    type="com.axelor.apps.sale.db.SaleOrder"
    call="com.axelor.csv.script.GenerateBusinessProject:generateBusinessProject">
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Company', 'importId', company_importId)"
      check-message="Company with importId :company_importId doesn't exist"/>
    <bind column="saleOrderTypeSelect" to="saleOrderTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('supplychain.sale.order.type.select', saleOrderTypeSelect, true)"
      check-message="Invalid saleOrderTypeSelect :saleOrderTypeSelect"/>
    <bind column="statusSelect" to="statusSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('sale.order.status.select', saleOrderTypeSelect, false)"
      check-message="Invalid statusSelect :statusSelect"/>
    <bind column="discountTypeSelect" to="discountTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('base.price.list.line.amount.type.select', discountTypeSelect, false)"
      check-message="Invalid discountTypeSelect :discountTypeSelect"/>
    <bind column="periodicityTypeSelect" to="periodicityTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('sale.subscription.periodicity.type.select', periodicityTypeSelect, false)"
      check-message="Invalid periodicityTypeSelect :periodicityTypeSelect"/>
    <bind column="deliveryState" to="deliveryState"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('sale.order.delivery.state', deliveryState, false)"
      check-message="Invalid deliveryState :deliveryState"/>
    <bind column="invoicingState" to="invoicingState"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('supplychain.sale.order.invoicing.state.select', invoicingState, false)"
      check-message="Invalid invoicingState :invoicingState"/>
    <bind column="saleOrderSeq" to="saleOrderSeq"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.sale.db.SaleOrder', 'importId', importId, 'saleOrderSeq, company.importId', saleOrderSeq, company_importId)"
      check-message="Sale order seq and company must be unique"/>
    <bind to="creationDate"
      eval="call:com.axelor.csv.script.ImportDateTime:importDate(creationDate)"
      column="creationDate"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(creationDate)"
      check-message="Creation date must not be null"/>
    <bind to="confirmationDateTime"
      eval="call:com.axelor.csv.script.ImportDateTime:importDateTime(confirmationDateTime)"
      column="confirmationDateTime"/>
    <bind to="shipmentDate"
      eval="call:com.axelor.csv.script.ImportDateTime:importDate(shipmentDate)"
      column="shipmentDate"/>
  </input>

  <input file="hr_timesheet.csv" type="com.axelor.apps.hr.db.Timesheet" separator=";"
    search="self.importId = :importId">
    <bind column="employee_importId" to="employee" search="self.importId = :employee_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.apps.hr.db.Employee', 'importId', employee_importId)"
      check-message="Employee with importId :employee_importId doesn't exist"/>
    <bind column="statusSelect" to="statusSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('hrs.timesheet.status.select', statusSelect, false)"
      check-message="Invalid statusSelect :statusSelect"/>
    <bind column="timeLoggingPreferenceSelect" to="timeLoggingPreferenceSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('hr.time.logging.preference.select', timeLoggingPreferenceSelect, false)"
      check-message="Invalid timeLoggingPreferenceSelect :timeLoggingPreferenceSelect"/>
    <bind to="fromDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(fromDate)"
      column="fromDate"/>
    <bind to="toDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(toDate)"
      column="toDate"/>
  </input>

  <input file="hr_timesheetLine.csv" type="com.axelor.apps.hr.db.TimesheetLine" separator=";"
    search="self.importId = :importId">
    <bind to="employee" search="self.importId = :employee_importId"/>
    <bind to="date" eval="call:com.axelor.csv.script.ImportDateTime:importDate(date)"
      column="date"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(date)"
      check-message="Date must not be null"/>
    <bind column="project_importId" to="project" search="self.importId = :project_importId"/>
    <bind column="product_importId" to="product" search="self.importId = :product_importId"/>
    <bind column="projectTask_importId" to="projectTask"
      search="self.importId = :projectTask_importId"/>
    <bind column="timesheet_importId" to="timesheet"
      search="self.importId = :timesheet_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.hr.db.TimesheetLine', 'importId', importId,
      'timesheet.importId, project.importId, product.importId, date, enableEditor, projectTask.importId', timesheet_importId, project_importId, product_importId, date, enableEditor, projectTask_importId)"
      check-message="Timesheet, project, activity, date, allow updates via editor and task must be unique"/>
    <bind to="duration" column="hoursDuration"/>
    <bind to="hoursDuration" column="hoursDuration"/>
    <bind to="projectTask" column="projectTask_importId"
      search="self.importId = :projectTask_importId" if="projectTask"/>
  </input>

  <input file="hr_timesheet.csv" type="com.axelor.apps.hr.db.Timesheet" separator=";"
    search="self.importId = :importId"
    call="com.axelor.csv.script.ValidateTimesheet:validateTimesheet">
    <bind column="employee_importId" to="employee" search="self.importId = :employee_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.apps.hr.db.Employee', 'importId', employee_importId)"
      check-message="Employee with importId :employee_importId doesn't exist"/>
    <bind column="statusSelect" to="statusSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('hrs.timesheet.status.select', statusSelect, false)"
      check-message="Invalid statusSelect :statusSelect"/>
    <bind column="timeLoggingPreferenceSelect" to="timeLoggingPreferenceSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('hr.time.logging.preference.select', timeLoggingPreferenceSelect, false)"
      check-message="Invalid timeLoggingPreferenceSelect :timeLoggingPreferenceSelect"/>
    <bind to="fromDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(fromDate)"
      column="fromDate"/>
    <bind to="toDate" eval="call:com.axelor.csv.script.ImportDateTime:importDate(toDate)"
      column="toDate"/>
  </input>

  <input file="hr_projectPlanningTime.csv"
    type="com.axelor.apps.project.db.ProjectPlanningTime" separator=";"
    search="self.importId = :importId">
    <bind column="employee_importId" to="employee" search="self.importId = :employee_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.apps.hr.db.Employee', 'importId', employee_importId)"
      check-message="Employee with importId :employee_importId doesn't exist"/>
    <bind column="project_importId" to="project" search="self.importId = :project_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.apps.project.db.Project', 'importId', project_importId)"
      check-message="Project with importId :project_importId doesn't exist"/>
    <bind column="timeUnit_importId" to="timeUnit" search="self.importId = :timeUnit_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Unit', 'importId', timeUnit_importId)"
      check-message="Time unit with importId :timeUnit_importId doesn't exist"/>
    <bind column="timepercent" to="timepercent"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('project.task.progress.select', timepercent, false)"
      check-message="Invalid timepercent :timepercent"/>
    <bind to="startDateTime"
      eval="call:com.axelor.csv.script.ImportDateTime:importDateTime(startDateTime)"
      column="startDateTime"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(startDateTime)"
      check-message="Start date time must not be null"/>
    <bind to="endDateTime"
      eval="call:com.axelor.csv.script.ImportDateTime:importDateTime(endDateTime)"
      column="endDateTime"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(endDateTime)"
      check-message="End date time must not be null"/>
  </input>

  <input file="sale_saleOrder.csv" separator=";" search="self.importId = :importId"
    type="com.axelor.apps.sale.db.SaleOrder"
    call="com.axelor.csv.script.ComputeSaleOrderProjectTotals:computeSaleOrderProjectTotals">
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Company', 'importId', company_importId)"
      check-message="Company with importId :company_importId doesn't exist"/>
    <bind column="saleOrderTypeSelect" to="saleOrderTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('supplychain.sale.order.type.select', saleOrderTypeSelect, true)"
      check-message="Invalid saleOrderTypeSelect :saleOrderTypeSelect"/>
    <bind column="statusSelect" to="statusSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('sale.order.status.select', saleOrderTypeSelect, false)"
      check-message="Invalid statusSelect :statusSelect"/>
    <bind column="discountTypeSelect" to="discountTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('base.price.list.line.amount.type.select', discountTypeSelect, false)"
      check-message="Invalid discountTypeSelect :discountTypeSelect"/>
    <bind column="periodicityTypeSelect" to="periodicityTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('sale.subscription.periodicity.type.select', periodicityTypeSelect, false)"
      check-message="Invalid periodicityTypeSelect :periodicityTypeSelect"/>
    <bind column="deliveryState" to="deliveryState"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('sale.order.delivery.state', deliveryState, false)"
      check-message="Invalid deliveryState :deliveryState"/>
    <bind column="invoicingState" to="invoicingState"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('supplychain.sale.order.invoicing.state.select', invoicingState, false)"
      check-message="Invalid invoicingState :invoicingState"/>
    <bind column="saleOrderSeq" to="saleOrderSeq"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.sale.db.SaleOrder', 'importId', importId, 'saleOrderSeq, company.importId', saleOrderSeq, company_importId)"
      check-message="Sale order seq and company must be unique"/>
    <bind to="creationDate"
      eval="call:com.axelor.csv.script.ImportDateTime:importDate(creationDate)"
      column="creationDate"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(creationDate)"
      check-message="Creation date must not be null"/>
    <bind to="confirmationDateTime"
      eval="call:com.axelor.csv.script.ImportDateTime:importDateTime(confirmationDateTime)"
      column="confirmationDateTime"/>
    <bind to="shipmentDate"
      eval="call:com.axelor.csv.script.ImportDateTime:importDate(shipmentDate)"
      column="shipmentDate"/>
  </input>

  <input file="project_project.csv" type="com.axelor.apps.project.db.Project" separator=";"
    search="self.importId = :importId" update="true">
    <bind column="code" to="code"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.project.db.Project', 'importId',
      importId, 'code', code)"
      check-message="Code must be unique"/>
    <bind column="taskStatusManagementSelect" to="taskStatusManagementSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('task.project.status.management.select', taskStatusManagementSelect, false)"
      check-message="Invalid taskStatusManagementSelect :taskStatusManagementSelect"/>
    <bind column="customFieldManagementSelect" to="customFieldManagementSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('project.custom.field.management.select', customFieldManagementSelect, false)"
      check-message="Invalid customFieldManagementSelect :customFieldManagementSelect"/>
    <bind column="sprintManagementSelect" to="sprintManagementSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('project.sprint.management.select', sprintManagementSelect, false)"
      check-message="Invalid sprintManagementSelect :sprintManagementSelect"/>
    <bind column="invoicingSequenceSelect" to="invoicingSequenceSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('business.project.invoicing.sequence.select', invoicingSequenceSelect, false)"
      check-message="Invalid invoicingSequenceSelect :invoicingSequenceSelect"/>
    <bind column="unitOnPrinting" to="unitOnPrinting"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('hr.time.logging.preference.select', unitOnPrinting, false)"
      check-message="Invalid unitOnPrinting :unitOnPrinting"/>
    <bind column="spentTimeCostComputationMethod" to="spentTimeCostComputationMethod"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('business.project.spent.time.computation.method.select', spentTimeCostComputationMethod, false)"
      check-message="Invalid spentTimeCostComputationMethod :spentTimeCostComputationMethod"/>
    <bind to="projectTaskStatusSet" column="projectTaskStatusSet"
      search="self.importId in :projectTaskStatusSet"
      eval="projectTaskStatusSet.split('\\|') as List"/>
    <bind to="projectTaskPrioritySet" column="projectTaskPrioritySet"
      search="self.importId in :projectTaskPrioritySet"
      eval="projectTaskPrioritySet.split('\\|') as List"/>
    <bind to="projectTaskCategorySet" column="projectTaskCategorySet"
      search="self.importId in :projectTaskCategorySet"
      eval="projectTaskCategorySet.split('\\|') as List"/>
    <bind to="completedTaskStatus" column="completedTaskStatus_importId"
      search="self.importId = :completedTaskStatus_importId"/>
  </input>

  <input file="project_businessProjectConfig.csv" separator=";"
    type="com.axelor.apps.businessproject.db.BusinessProjectConfig"
    search="self.importId = :importId">
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isRecordPresent('com.axelor.apps.base.db.Company', 'importId', company_importId)"
      check-message="Company with importId :company_importId doesn't exist"/>
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.businessproject.db.BusinessProjectConfig', 'importId', importId, 'company.importId', company_importId)"
      check-message="Company must be unique"/>
  </input>

</csv-inputs>