<?xml version="1.0" encoding="UTF-8"?>
<csv-inputs xmlns="http://axelor.com/xml/ns/data-import"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://axelor.com/xml/ns/data-import http://axelor.com/xml/ns/data-import/data-import_7.4.xsd">

  <input file="auth_permission.csv" separator=";" type="com.axelor.auth.db.Permission"
    search="self.name = :name" call="com.axelor.csv.script.ImportPermission:importPermissionToRole">
    <bind column="name" to="name"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="object" to="object"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(object)"
      check-message="Object must not be null"/>
    <bind to="canRead" eval="can_read == 'x' ? 'true' : 'false'"/>
    <bind to="canWrite" eval="can_write == 'x' ? 'true' : 'false'"/>
    <bind to="canCreate" eval="can_create == 'x' ? 'true' : 'false'"/>
    <bind to="canRemove" eval="can_remove == 'x' ? 'true' : 'false'"/>
    <bind to="canExport" eval="can_export == 'x' ? 'true' : 'false'"/>
  </input>

  <input file="meta_helpEN.csv" separator=";" type="com.axelor.meta.db.MetaHelp">
    <bind to="help"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(help)"
      check-message="Help value must not be null"/>
    <bind to="language" eval="'en'"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.meta.db.MetaHelp', 'language', 'en')"
      check-message="Invalid language :language"/>
    <bind to="type" eval="'tooltip'"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.meta.db.MetaHelp', 'type', 'tooltip')"
      check-message="Invalid help type :type"/>
    <bind to="model" eval="__repo__(MetaModel).findByName(object)?.getFullName()"
      column="object"/>
  </input>

  <input file="meta_helpFR.csv" separator=";" type="com.axelor.meta.db.MetaHelp">
    <bind to="help"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(help)"
      check-message="Help value must not be null"/>
    <bind to="language" eval="'fr'"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.meta.db.MetaHelp', 'language', 'fr')"
      check-message="Invalid language :language"/>
    <bind to="type" eval="'tooltip'"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.meta.db.MetaHelp', 'type', 'tooltip')"
      check-message="Invalid help type :type"/>
    <bind to="model" eval="__repo__(MetaModel).findByName(object)?.getFullName()"
      column="object"/>
  </input>

  <input file="meta_metaMenu.csv" separator=";" type="com.axelor.meta.db.MetaMenu"
    search="self.name = :name" update="true">
    <bind column="name" to="name"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="title" to="title"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(title)"
      check-message="Title must not be null"/>
    <bind column="xmlId" to="xmlId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.meta.db.MetaMenu', 'name', name, 'xmlId', xmlId)"
      check-message="Xml id must be unique"/>
    <bind column="tagStyle" to="tagStyle"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.meta.db.MetaMenu', 'tagStyle', tagStyle)"
      check-message="Invalid tagStyle :tagStyle"/>
  </input>

  <input file="meta_metaJsonField.csv" separator=";" type="com.axelor.meta.db.MetaJsonField"
    search="self.name = :name and self.model = :model and self.modelField = :modelField and self.jsonModel is null"
    call="com.axelor.studio.service.ImportService:importJsonField">
    <bind to="name" column="name"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind to="title" column="title"/>
    <bind to="type" column="type"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.meta.db.MetaJsonField', 'type', type)"
      check-message="Invalid type :type"/>
    <bind to="model" column="model"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(model)"
      check-message="Model must not be null"/>
    <bind to="modelField" column="modelField"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(modelField)"
      check-message="Model field must not be null"/>
    <bind to="trackEvent" column="trackEvent"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.meta.db.MetaJsonField', 'trackEvent', trackEvent)"
      check-message="Invalid trackEvent :trackEvent"/>
    <bind to="targetModel" column="targetModel"/>
    <bind to="sequence" column="sequence"/>
    <bind to="onClick" column="onClick"/>
    <bind to="gridView" column="gridView"/>
    <bind to="formView" column="formView"/>
    <bind to="widgetAttrs" column="widgetAttrs"/>
    <bind to="showIf" column="showIf"/>
  </input>

  <input file="base_sequence.csv" separator=";" type="com.axelor.apps.base.db.Sequence"
    search="self.importId = :importId">
    <bind column="codeSelect" to="codeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.base.db.Sequence', 'codeSelect', codeSelect)"
      check-message="Invalid codeSelect :codeSelect"/>
    <bind column="name" to="name"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="sequenceTypeSelect" to="sequenceTypeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(sequenceTypeSelect)"
      check-message="Sequence type must not be null"/>
    <bind column="company_importId" to="company" search="self.importId = :company_importId"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkUniqueConstraint('com.axelor.apps.base.db.Sequence', 'importId', importId, 'company.importId, codeSelect, prefixe, suffixe', company_importId, codeSelect, prefixe, suffixe)"
      check-message="Company, code, prefixe and suffixe must be unique"/>
    <bind to="yearlyResetOk" column="yearlyResetOk" eval="yearlyResetOk == '1' ? true : false"/>
    <bind to="nextNum" column="nextNum" eval="nextNum?.empty ? '1' : nextNum"/>
    <bind to="padding" column="padding" eval="padding?.empty ? '1' : padding"/>
    <bind to="toBeAdded" column="toBeAdded" eval="toBeAdded?.empty ? '1' : toBeAdded"/>
    <bind to="resetDate"
      eval="call:com.axelor.apps.base.service.app.AppBaseService:getTodayDate(null)"/>
  </input>

  <input file="base_birtTemplate.csv" separator=";"
    type="com.axelor.apps.base.db.BirtTemplate" search="self.importId = :importId">
    <bind column="name" to="name"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="format" to="format"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.base.db.BirtTemplate', 'format', format)"
      check-message="Invalid format :format"/>
    <bind column="templateEngineSelect" to="templateEngineSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.base.db.BirtTemplate', 'templateEngineSelect', templateEngineSelect)"
      check-message="Invalid templateEngineSelect :templateEngineSelect"/>
    <bind to="metaModel" search="self.fullName = :modelName"/>
  </input>

  <input file="base_birtTemplateParameter.csv" separator=";"
    type="com.axelor.apps.base.db.BirtTemplateParameter" search="self.importId = :importId">
    <bind column="name" to="name"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.isValuePresent(name)"
      check-message="Name must not be null"/>
    <bind column="type" to="type"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.base.db.BirtTemplateParameter', 'type', type)"
      check-message="Invalid type :type"/>
  </input>

  <input file="base_printingTemplate.csv" type="com.axelor.apps.base.db.PrintingTemplate"
    separator=";" search="self.importId = :importId">
    <bind column="statusSelect" to="statusSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.base.db.PrintingTemplate', 'statusSelect', statusSelect)"
      check-message="Invalid statusSelect :statusSelect"/>
    <bind to="metaModel" search="self.fullName = :modelName"/>
  </input>

  <input file="base_printingTemplateLine.csv"
    type="com.axelor.apps.base.db.PrintingTemplateLine" separator=";"
    search="self.importId = :importId">
    <bind column="typeSelect" to="typeSelect"
      check="com.axelor.apps.base.service.imports.importer.ImportHelper.checkSelection('com.axelor.apps.base.db.PrintingTemplateLine', 'typeSelect', typeSelect)"
      check-message="Invalid typeSelect :typeSelect"/>
  </input>

</csv-inputs>
